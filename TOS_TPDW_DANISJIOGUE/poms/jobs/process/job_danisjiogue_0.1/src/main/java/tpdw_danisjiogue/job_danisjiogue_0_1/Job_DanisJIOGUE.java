// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package tpdw_danisjiogue.job_danisjiogue_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Job_DanisJIOGUE Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Job_DanisJIOGUE implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Job_DanisJIOGUE";
	private final String projectName = "TPDW_DANISJIOGUE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Job_DanisJIOGUE.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Job_DanisJIOGUE.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class BD_TypeCarrriereStruct implements routines.system.IPersistableRow<BD_TypeCarrriereStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_typec;

				public long getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public String type_carriere;

				public String getType_carriere () {
					return this.type_carriere;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_typec;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final BD_TypeCarrriereStruct other = (BD_TypeCarrriereStruct) obj;
		
						if (this.idacl_typec != other.idacl_typec)
							return false;
					

		return true;
    }

	public void copyDataTo(BD_TypeCarrriereStruct other) {

		other.idacl_typec = this.idacl_typec;
	            other.type_carriere = this.type_carriere;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(BD_TypeCarrriereStruct other) {

		other.idacl_typec = this.idacl_typec;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_typec = dis.readLong();
					
					this.type_carriere = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_typec);
					
					// String
				
						writeString(this.type_carriere,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",type_carriere="+type_carriere);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(BD_TypeCarrriereStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_typec, other.idacl_typec);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];

	
			    public long idacl_typec;

				public long getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public String type_carriere;

				public String getType_carriere () {
					return this.type_carriere;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_typec = dis.readLong();
					
					this.type_carriere = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_typec);
					
					// String
				
						writeString(this.type_carriere,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",type_carriere="+type_carriere);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_typec;

				public long getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public String type_carriere;

				public String getType_carriere () {
					return this.type_carriere;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_typec;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.idacl_typec != other.idacl_typec)
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.idacl_typec = this.idacl_typec;
	            other.type_carriere = this.type_carriere;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.idacl_typec = this.idacl_typec;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_typec = dis.readLong();
					
					this.type_carriere = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_typec);
					
					// String
				
						writeString(this.type_carriere,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",type_carriere="+type_carriere);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_typec, other.idacl_typec);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();
row18Struct row18 = new row18Struct();
BD_TypeCarrriereStruct BD_TypeCarrriere = new BD_TypeCarrriereStruct();






	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("BD_TypeCarrriere" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_9 = 0;
		



int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;
int rejectedCount_tDBOutput_9=0;
String dbschema_tDBOutput_9 = null;
String tableName_tDBOutput_9 = null;
boolean whetherReject_tDBOutput_9 = false;

java.util.Calendar calendar_tDBOutput_9 = java.util.Calendar.getInstance();
long year1_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_9;

java.util.Calendar calendar_datetimeoffset_tDBOutput_9 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_9 = 1;
        if(updateKeyCount_tDBOutput_9 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_9 = null;
String dbUser_tDBOutput_9 = null;
    dbschema_tDBOutput_9 = "";
    String driverClass_tDBOutput_9 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_9);
    String port_tDBOutput_9 = "1433";
    String dbname_tDBOutput_9 = "GestEntCom" ;
    String url_tDBOutput_9 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_9)) {
    	url_tDBOutput_9 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_9)) {
				url_tDBOutput_9 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_9 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_9 = "sa";

 
	final String decryptedPassword_tDBOutput_9 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;	
    conn_tDBOutput_9 = java.sql.DriverManager.getConnection(url_tDBOutput_9,dbUser_tDBOutput_9,dbPwd_tDBOutput_9);
	
		resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);
	
        conn_tDBOutput_9.setAutoCommit(false);
        int commitEvery_tDBOutput_9 = 10000;
        int commitCounter_tDBOutput_9 = 0;


if(dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
    tableName_tDBOutput_9 = "acl_typecarriere";
} else {
    tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "].[" + "acl_typecarriere";
}
	int count_tDBOutput_9=0;

                                boolean whetherExist_tDBOutput_9 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_9.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_9 + "]" );
                                        whetherExist_tDBOutput_9 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_9 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_9) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                                        stmtCreate_tDBOutput_9.execute("CREATE TABLE [" + tableName_tDBOutput_9 + "]([idacl_typec] BIGINT  not null ,[type_carriere] VARCHAR(50)  ,[id_user] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[est_supprime] BIGINT ,primary key([idacl_typec]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_9 + "] WHERE [idacl_typec] = ?");
        resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);
        String insert_tDBOutput_9 = "INSERT INTO [" + tableName_tDBOutput_9 + "] ([idacl_typec],[type_carriere],[id_user],[date_creation],[date_last_modif],[est_supprime]) VALUES (?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
        resourceMap.put("pstmtInsert_tDBOutput_9", pstmtInsert_tDBOutput_9);
        String update_tDBOutput_9 = "UPDATE [" + tableName_tDBOutput_9 + "] SET [type_carriere] = ?,[id_user] = ?,[date_creation] = ?,[date_last_modif] = ?,[est_supprime] = ? WHERE [idacl_typec] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(update_tDBOutput_9);
        resourceMap.put("pstmtUpdate_tDBOutput_9", pstmtUpdate_tDBOutput_9);

 



/**
 * [tDBOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
BD_TypeCarrriereStruct BD_TypeCarrriere_tmp = new BD_TypeCarrriereStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_9", false);
		start_Hash.put("tFilterRow_9", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_9 = 0;
		
    int nb_line_tFilterRow_9 = 0;
    int nb_line_ok_tFilterRow_9 = 0;
    int nb_line_reject_tFilterRow_9 = 0;

    class Operator_tFilterRow_9 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_9(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_9 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_9 = java.util.Calendar.getInstance();
		    calendar_tDBInput_9.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_9 = calendar_tDBInput_9.getTime();
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_9);
					String dbUser_tDBInput_9 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT \n  `acl_typecarriere`.`idacl_typec`, \n  `acl_typecarriere`.`type_carriere`, \n  `acl_typecarriere`.`id_user`, \n  "
+"`acl_typecarriere`.`date_creation`, \n  `acl_typecarriere`.`date_last_modif`, \n  `acl_typecarriere`.`est_supprime`\nFROM `"
+"acl_typecarriere`";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row17.idacl_typec = 0;
							} else {
		                          
            if(rs_tDBInput_9.getObject(1) != null) {
                row17.idacl_typec = rs_tDBInput_9.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row17.type_carriere = null;
							} else {
	                         		
        	row17.type_carriere = routines.system.JDBCUtil.getString(rs_tDBInput_9, 2, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row17.id_user = null;
							} else {
		                          
            if(rs_tDBInput_9.getObject(3) != null) {
                row17.id_user = rs_tDBInput_9.getLong(3);
            } else {
                    row17.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								row17.date_creation = null;
							} else {
										
				if(rs_tDBInput_9.getString(4) != null) {
					String dateString_tDBInput_9 = rs_tDBInput_9.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_9) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_9)) {
						row17.date_creation = rs_tDBInput_9.getTimestamp(4);
					} else {
						row17.date_creation = (java.util.Date) year0_tDBInput_9.clone();
					}
				} else {
					row17.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								row17.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_9.getString(5) != null) {
					String dateString_tDBInput_9 = rs_tDBInput_9.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_9) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_9)) {
						row17.date_last_modif = rs_tDBInput_9.getTimestamp(5);
					} else {
						row17.date_last_modif = (java.util.Date) year0_tDBInput_9.clone();
					}
				} else {
					row17.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_9 < 6) {
								row17.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_9.getObject(6) != null) {
                row17.est_supprime = rs_tDBInput_9.getLong(6);
            } else {
                    row17.est_supprime = null;
            }
		                    }
					

 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_9 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		

          row18 = null;
    Operator_tFilterRow_9 ope_tFilterRow_9 = new Operator_tFilterRow_9("||");
            ope_tFilterRow_9.matches((row17.est_supprime == null? false : row17.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_9.matches((row17.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_9.getMatchFlag()) {
              if(row18 == null){ 
                row18 = new row18Struct();
              }
               row18.idacl_typec = row17.idacl_typec;
               row18.type_carriere = row17.type_carriere;
               row18.id_user = row17.id_user;
               row18.date_creation = row17.date_creation;
               row18.date_last_modif = row17.date_last_modif;
               row18.est_supprime = row17.est_supprime;    
      nb_line_ok_tFilterRow_9++;
    } else {
      nb_line_reject_tFilterRow_9++;
    }

nb_line_tFilterRow_9++;

 


	tos_count_tFilterRow_9++;

/**
 * [tFilterRow_9 main ] stop
 */
	
	/**
	 * [tFilterRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

BD_TypeCarrriere = null;


// # Output table : 'BD_TypeCarrriere'
BD_TypeCarrriere_tmp.idacl_typec = row18.idacl_typec ;
BD_TypeCarrriere_tmp.type_carriere = row18.type_carriere ;
BD_TypeCarrriere_tmp.id_user = row18.id_user ;
BD_TypeCarrriere_tmp.date_creation = row18.date_creation ;
BD_TypeCarrriere_tmp.date_last_modif = row18.date_last_modif ;
BD_TypeCarrriere_tmp.est_supprime = row18.est_supprime ;
BD_TypeCarrriere = BD_TypeCarrriere_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "BD_TypeCarrriere"
if(BD_TypeCarrriere != null) { 



	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

			//BD_TypeCarrriere
			//BD_TypeCarrriere


			
				if(execStat){
					runStat.updateStatOnConnection("BD_TypeCarrriere"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_9 = false;


                    pstmt_tDBOutput_9.setLong(1, BD_TypeCarrriere.idacl_typec);

            int checkCount_tDBOutput_9 = -1;
            try (java.sql.ResultSet rs_tDBOutput_9 = pstmt_tDBOutput_9.executeQuery()) {
                while(rs_tDBOutput_9.next()) {
                    checkCount_tDBOutput_9 = rs_tDBOutput_9.getInt(1);
                }
            }
            if(checkCount_tDBOutput_9 > 0) {
                        if(BD_TypeCarrriere.type_carriere == null) {
pstmtUpdate_tDBOutput_9.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_9.setString(1, BD_TypeCarrriere.type_carriere);
}

                        if(BD_TypeCarrriere.id_user == null) {
pstmtUpdate_tDBOutput_9.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_9.setLong(2, BD_TypeCarrriere.id_user);
}

                        if(BD_TypeCarrriere.date_creation != null) {
pstmtUpdate_tDBOutput_9.setTimestamp(3, new java.sql.Timestamp(BD_TypeCarrriere.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_9.setNull(3, java.sql.Types.DATE);
}

                        if(BD_TypeCarrriere.date_last_modif != null) {
pstmtUpdate_tDBOutput_9.setTimestamp(4, new java.sql.Timestamp(BD_TypeCarrriere.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_9.setNull(4, java.sql.Types.DATE);
}

                        if(BD_TypeCarrriere.est_supprime == null) {
pstmtUpdate_tDBOutput_9.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_9.setLong(5, BD_TypeCarrriere.est_supprime);
}


	                    

                        pstmtUpdate_tDBOutput_9.setLong(6 + count_tDBOutput_9, BD_TypeCarrriere.idacl_typec);

            try {
                    updatedCount_tDBOutput_9 = updatedCount_tDBOutput_9 + pstmtUpdate_tDBOutput_9.executeUpdate();
                    nb_line_tDBOutput_9++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_9 = true;
                    	nb_line_tDBOutput_9++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_9.setLong(1, BD_TypeCarrriere.idacl_typec);

                        if(BD_TypeCarrriere.type_carriere == null) {
pstmtInsert_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_9.setString(2, BD_TypeCarrriere.type_carriere);
}

                        if(BD_TypeCarrriere.id_user == null) {
pstmtInsert_tDBOutput_9.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_9.setLong(3, BD_TypeCarrriere.id_user);
}

                        if(BD_TypeCarrriere.date_creation != null) {
pstmtInsert_tDBOutput_9.setTimestamp(4, new java.sql.Timestamp(BD_TypeCarrriere.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_9.setNull(4, java.sql.Types.DATE);
}

                        if(BD_TypeCarrriere.date_last_modif != null) {
pstmtInsert_tDBOutput_9.setTimestamp(5, new java.sql.Timestamp(BD_TypeCarrriere.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_9.setNull(5, java.sql.Types.DATE);
}

                        if(BD_TypeCarrriere.est_supprime == null) {
pstmtInsert_tDBOutput_9.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_9.setLong(6, BD_TypeCarrriere.est_supprime);
}

            try {
                    insertedCount_tDBOutput_9 = insertedCount_tDBOutput_9 + pstmtInsert_tDBOutput_9.executeUpdate();
                    nb_line_tDBOutput_9++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_9 = true;
                    	nb_line_tDBOutput_9++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_9{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_9) throws Exception {
                try {
						
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							if(countEach_tDBOutput_9 == -2 || countEach_tDBOutput_9 == -3) {
								break;
							}
							counter += countEach_tDBOutput_9;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_9 = 0;
					for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_9) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							if(countEach_tDBOutput_9 == -2 || countEach_tDBOutput_9 == -3) {
								break;
							}
							counter += countEach_tDBOutput_9;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_9++;
                if(commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {
                	
                	conn_tDBOutput_9.commit();
            		
                	commitCounter_tDBOutput_9=0;
                }

 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */

} // End of branch "BD_TypeCarrriere"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tFilterRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
		if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
			
			conn_tDBInput_9.close();
			
		}
		
}

		   globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
		


 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tFilterRow_9 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	
    globalMap.put("tFilterRow_9_NB_LINE", nb_line_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_OK", nb_line_ok_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_REJECT", nb_line_reject_tFilterRow_9);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_9", true);
end_Hash.put("tFilterRow_9", System.currentTimeMillis());




/**
 * [tFilterRow_9 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



        if(pstmtUpdate_tDBOutput_9 != null){
            pstmtUpdate_tDBOutput_9.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_9");
        }
        if(pstmtInsert_tDBOutput_9 != null){
            pstmtInsert_tDBOutput_9.close();
            resourceMap.remove("pstmtInsert_tDBOutput_9");
        }
        if(pstmt_tDBOutput_9 != null) {
            pstmt_tDBOutput_9.close();
            resourceMap.remove("pstmt_tDBOutput_9");
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);
            conn_tDBOutput_9.commit();
			
        conn_tDBOutput_9 .close();
        resourceMap.put("finish_tDBOutput_9", true);

	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("BD_TypeCarrriere"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());




/**
 * [tDBOutput_9 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tFilterRow_9 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_9 = null;
                if ((pstmtUpdateToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_9")) != null) {
                    pstmtUpdateToClose_tDBOutput_9.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_9 = null;
                if ((pstmtInsertToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_9")) != null) {
                    pstmtInsertToClose_tDBOutput_9.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_9") == null){
            java.sql.Connection ctn_tDBOutput_9 = null;
            if((ctn_tDBOutput_9 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_9")) != null){
                try {
                    ctn_tDBOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_9) {
                    String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :" + sqlEx_tDBOutput_9.getMessage();
                    System.err.println(errorMessage_tDBOutput_9);
                }
            }
        }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class BD_ConversionStruct implements routines.system.IPersistableRow<BD_ConversionStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_conversion;

				public long getIdacl_conversion () {
					return this.idacl_conversion;
				}
				
			    public Long idmonnaie_1;

				public Long getIdmonnaie_1 () {
					return this.idmonnaie_1;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public Long idmonnaie_2;

				public Long getIdmonnaie_2 () {
					return this.idmonnaie_2;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_conversion;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final BD_ConversionStruct other = (BD_ConversionStruct) obj;
		
						if (this.idacl_conversion != other.idacl_conversion)
							return false;
					

		return true;
    }

	public void copyDataTo(BD_ConversionStruct other) {

		other.idacl_conversion = this.idacl_conversion;
	            other.idmonnaie_1 = this.idmonnaie_1;
	            other.taux_1 = this.taux_1;
	            other.idmonnaie_2 = this.idmonnaie_2;
	            other.taux_2 = this.taux_2;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(BD_ConversionStruct other) {

		other.idacl_conversion = this.idacl_conversion;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_conversion = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idmonnaie_1 = null;
           				} else {
           			    	this.idmonnaie_1 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idmonnaie_2 = null;
           				} else {
           			    	this.idmonnaie_2 = dis.readLong();
           				}
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_conversion);
					
					// Long
				
						if(this.idmonnaie_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idmonnaie_1);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// Long
				
						if(this.idmonnaie_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idmonnaie_2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_conversion="+String.valueOf(idacl_conversion));
		sb.append(",idmonnaie_1="+String.valueOf(idmonnaie_1));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",idmonnaie_2="+String.valueOf(idmonnaie_2));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(BD_ConversionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_conversion, other.idacl_conversion);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];

	
			    public long idacl_conversion;

				public long getIdacl_conversion () {
					return this.idacl_conversion;
				}
				
			    public Long idmonnaie_1;

				public Long getIdmonnaie_1 () {
					return this.idmonnaie_1;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public Long idmonnaie_2;

				public Long getIdmonnaie_2 () {
					return this.idmonnaie_2;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_conversion = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idmonnaie_1 = null;
           				} else {
           			    	this.idmonnaie_1 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idmonnaie_2 = null;
           				} else {
           			    	this.idmonnaie_2 = dis.readLong();
           				}
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_conversion);
					
					// Long
				
						if(this.idmonnaie_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idmonnaie_1);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// Long
				
						if(this.idmonnaie_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idmonnaie_2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_conversion="+String.valueOf(idacl_conversion));
		sb.append(",idmonnaie_1="+String.valueOf(idmonnaie_1));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",idmonnaie_2="+String.valueOf(idmonnaie_2));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_conversion;

				public long getIdacl_conversion () {
					return this.idacl_conversion;
				}
				
			    public Long idmonnaie_1;

				public Long getIdmonnaie_1 () {
					return this.idmonnaie_1;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public Long idmonnaie_2;

				public Long getIdmonnaie_2 () {
					return this.idmonnaie_2;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_conversion;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.idacl_conversion != other.idacl_conversion)
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.idacl_conversion = this.idacl_conversion;
	            other.idmonnaie_1 = this.idmonnaie_1;
	            other.taux_1 = this.taux_1;
	            other.idmonnaie_2 = this.idmonnaie_2;
	            other.taux_2 = this.taux_2;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.idacl_conversion = this.idacl_conversion;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_conversion = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idmonnaie_1 = null;
           				} else {
           			    	this.idmonnaie_1 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idmonnaie_2 = null;
           				} else {
           			    	this.idmonnaie_2 = dis.readLong();
           				}
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_conversion);
					
					// Long
				
						if(this.idmonnaie_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idmonnaie_1);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// Long
				
						if(this.idmonnaie_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idmonnaie_2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_conversion="+String.valueOf(idacl_conversion));
		sb.append(",idmonnaie_1="+String.valueOf(idmonnaie_1));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",idmonnaie_2="+String.valueOf(idmonnaie_2));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_conversion, other.idacl_conversion);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();
row20Struct row20 = new row20Struct();
BD_ConversionStruct BD_Conversion = new BD_ConversionStruct();






	
	/**
	 * [tDBOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_10", false);
		start_Hash.put("tDBOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("BD_Conversion" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_10 = 0;
		



int nb_line_tDBOutput_10 = 0;
int nb_line_update_tDBOutput_10 = 0;
int nb_line_inserted_tDBOutput_10 = 0;
int nb_line_deleted_tDBOutput_10 = 0;
int nb_line_rejected_tDBOutput_10 = 0;

int deletedCount_tDBOutput_10=0;
int updatedCount_tDBOutput_10=0;
int insertedCount_tDBOutput_10=0;
int rejectedCount_tDBOutput_10=0;
String dbschema_tDBOutput_10 = null;
String tableName_tDBOutput_10 = null;
boolean whetherReject_tDBOutput_10 = false;

java.util.Calendar calendar_tDBOutput_10 = java.util.Calendar.getInstance();
long year1_tDBOutput_10 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_10 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_10 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_10;

java.util.Calendar calendar_datetimeoffset_tDBOutput_10 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_10 = 1;
        if(updateKeyCount_tDBOutput_10 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_10 = null;
String dbUser_tDBOutput_10 = null;
    dbschema_tDBOutput_10 = "";
    String driverClass_tDBOutput_10 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_10);
    String port_tDBOutput_10 = "1433";
    String dbname_tDBOutput_10 = "GestEntCom" ;
    String url_tDBOutput_10 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_10)) {
    	url_tDBOutput_10 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_10)) {
				url_tDBOutput_10 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_10 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_10 = "sa";

 
	final String decryptedPassword_tDBOutput_10 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_10 = decryptedPassword_tDBOutput_10;	
    conn_tDBOutput_10 = java.sql.DriverManager.getConnection(url_tDBOutput_10,dbUser_tDBOutput_10,dbPwd_tDBOutput_10);
	
		resourceMap.put("conn_tDBOutput_10", conn_tDBOutput_10);
	
        conn_tDBOutput_10.setAutoCommit(false);
        int commitEvery_tDBOutput_10 = 10000;
        int commitCounter_tDBOutput_10 = 0;


if(dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
    tableName_tDBOutput_10 = "acl_conversion";
} else {
    tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "].[" + "acl_conversion";
}
	int count_tDBOutput_10=0;

                                boolean whetherExist_tDBOutput_10 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_10.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_10 + "]" );
                                        whetherExist_tDBOutput_10 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_10 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_10) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                                        stmtCreate_tDBOutput_10.execute("CREATE TABLE [" + tableName_tDBOutput_10 + "]([idacl_conversion] BIGINT  not null ,[idmonnaie_1] BIGINT ,[taux_1] DECIMAL(10,2)  ,[idmonnaie_2] BIGINT ,[taux_2] DECIMAL(10,2)  ,[id_user] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[est_supprime] BIGINT ,primary key([idacl_conversion]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_10 + "] WHERE [idacl_conversion] = ?");
        resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);
        String insert_tDBOutput_10 = "INSERT INTO [" + tableName_tDBOutput_10 + "] ([idacl_conversion],[idmonnaie_1],[taux_1],[idmonnaie_2],[taux_2],[id_user],[date_creation],[date_last_modif],[est_supprime]) VALUES (?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
        resourceMap.put("pstmtInsert_tDBOutput_10", pstmtInsert_tDBOutput_10);
        String update_tDBOutput_10 = "UPDATE [" + tableName_tDBOutput_10 + "] SET [idmonnaie_1] = ?,[taux_1] = ?,[idmonnaie_2] = ?,[taux_2] = ?,[id_user] = ?,[date_creation] = ?,[date_last_modif] = ?,[est_supprime] = ? WHERE [idacl_conversion] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(update_tDBOutput_10);
        resourceMap.put("pstmtUpdate_tDBOutput_10", pstmtUpdate_tDBOutput_10);

 



/**
 * [tDBOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row20" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
BD_ConversionStruct BD_Conversion_tmp = new BD_ConversionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFilterRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_10", false);
		start_Hash.put("tFilterRow_10", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row19" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_10 = 0;
		
    int nb_line_tFilterRow_10 = 0;
    int nb_line_ok_tFilterRow_10 = 0;
    int nb_line_reject_tFilterRow_10 = 0;

    class Operator_tFilterRow_10 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_10(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_10 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_10 = java.util.Calendar.getInstance();
		    calendar_tDBInput_10.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_10 = calendar_tDBInput_10.getTime();
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_10);
					String dbUser_tDBInput_10 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT \n  `acl_conversion`.`idacl_conversion`, \n  `acl_conversion`.`idmonnaie_1`, \n  `acl_conversion`.`taux_1`, \n  `acl"
+"_conversion`.`idmonnaie_2`, \n  `acl_conversion`.`taux_2`, \n  `acl_conversion`.`id_user`, \n  `acl_conversion`.`date_creat"
+"ion`, \n  `acl_conversion`.`date_last_modif`, \n  `acl_conversion`.`est_supprime`\nFROM `acl_conversion`";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row19.idacl_conversion = 0;
							} else {
		                          
            if(rs_tDBInput_10.getObject(1) != null) {
                row19.idacl_conversion = rs_tDBInput_10.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row19.idmonnaie_1 = null;
							} else {
		                          
            if(rs_tDBInput_10.getObject(2) != null) {
                row19.idmonnaie_1 = rs_tDBInput_10.getLong(2);
            } else {
                    row19.idmonnaie_1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row19.taux_1 = null;
							} else {
		                          
            if(rs_tDBInput_10.getObject(3) != null) {
                row19.taux_1 = rs_tDBInput_10.getBigDecimal(3);
            } else {
                    row19.taux_1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								row19.idmonnaie_2 = null;
							} else {
		                          
            if(rs_tDBInput_10.getObject(4) != null) {
                row19.idmonnaie_2 = rs_tDBInput_10.getLong(4);
            } else {
                    row19.idmonnaie_2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 5) {
								row19.taux_2 = null;
							} else {
		                          
            if(rs_tDBInput_10.getObject(5) != null) {
                row19.taux_2 = rs_tDBInput_10.getBigDecimal(5);
            } else {
                    row19.taux_2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 6) {
								row19.id_user = null;
							} else {
		                          
            if(rs_tDBInput_10.getObject(6) != null) {
                row19.id_user = rs_tDBInput_10.getLong(6);
            } else {
                    row19.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 7) {
								row19.date_creation = null;
							} else {
										
				if(rs_tDBInput_10.getString(7) != null) {
					String dateString_tDBInput_10 = rs_tDBInput_10.getString(7);
					if (!("0000-00-00").equals(dateString_tDBInput_10) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_10)) {
						row19.date_creation = rs_tDBInput_10.getTimestamp(7);
					} else {
						row19.date_creation = (java.util.Date) year0_tDBInput_10.clone();
					}
				} else {
					row19.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_10 < 8) {
								row19.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_10.getString(8) != null) {
					String dateString_tDBInput_10 = rs_tDBInput_10.getString(8);
					if (!("0000-00-00").equals(dateString_tDBInput_10) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_10)) {
						row19.date_last_modif = rs_tDBInput_10.getTimestamp(8);
					} else {
						row19.date_last_modif = (java.util.Date) year0_tDBInput_10.clone();
					}
				} else {
					row19.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_10 < 9) {
								row19.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_10.getObject(9) != null) {
                row19.est_supprime = rs_tDBInput_10.getLong(9);
            } else {
                    row19.est_supprime = null;
            }
		                    }
					

 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_10 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

			//row19
			//row19


			
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				} 
			

		

          row20 = null;
    Operator_tFilterRow_10 ope_tFilterRow_10 = new Operator_tFilterRow_10("||");
            ope_tFilterRow_10.matches((row19.est_supprime == null? false : row19.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_10.matches((row19.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_10.getMatchFlag()) {
              if(row20 == null){ 
                row20 = new row20Struct();
              }
               row20.idacl_conversion = row19.idacl_conversion;
               row20.idmonnaie_1 = row19.idmonnaie_1;
               row20.taux_1 = row19.taux_1;
               row20.idmonnaie_2 = row19.idmonnaie_2;
               row20.taux_2 = row19.taux_2;
               row20.id_user = row19.id_user;
               row20.date_creation = row19.date_creation;
               row20.date_last_modif = row19.date_last_modif;
               row20.est_supprime = row19.est_supprime;    
      nb_line_ok_tFilterRow_10++;
    } else {
      nb_line_reject_tFilterRow_10++;
    }

nb_line_tFilterRow_10++;

 


	tos_count_tFilterRow_10++;

/**
 * [tFilterRow_10 main ] stop
 */
	
	/**
	 * [tFilterRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//row20
			//row20


			
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

BD_Conversion = null;


// # Output table : 'BD_Conversion'
BD_Conversion_tmp.idacl_conversion = row20.idacl_conversion ;
BD_Conversion_tmp.idmonnaie_1 = row20.idmonnaie_1 ;
BD_Conversion_tmp.taux_1 = row20.taux_1 ;
BD_Conversion_tmp.idmonnaie_2 = row20.idmonnaie_2 ;
BD_Conversion_tmp.taux_2 = row20.taux_2 ;
BD_Conversion_tmp.id_user = row20.id_user ;
BD_Conversion_tmp.date_creation = row20.date_creation ;
BD_Conversion_tmp.date_last_modif = row20.date_last_modif ;
BD_Conversion_tmp.est_supprime = row20.est_supprime ;
BD_Conversion = BD_Conversion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "BD_Conversion"
if(BD_Conversion != null) { 



	
	/**
	 * [tDBOutput_10 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

			//BD_Conversion
			//BD_Conversion


			
				if(execStat){
					runStat.updateStatOnConnection("BD_Conversion"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_10 = false;


                    pstmt_tDBOutput_10.setLong(1, BD_Conversion.idacl_conversion);

            int checkCount_tDBOutput_10 = -1;
            try (java.sql.ResultSet rs_tDBOutput_10 = pstmt_tDBOutput_10.executeQuery()) {
                while(rs_tDBOutput_10.next()) {
                    checkCount_tDBOutput_10 = rs_tDBOutput_10.getInt(1);
                }
            }
            if(checkCount_tDBOutput_10 > 0) {
                        if(BD_Conversion.idmonnaie_1 == null) {
pstmtUpdate_tDBOutput_10.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_10.setLong(1, BD_Conversion.idmonnaie_1);
}

                        pstmtUpdate_tDBOutput_10.setBigDecimal(2, BD_Conversion.taux_1);

                        if(BD_Conversion.idmonnaie_2 == null) {
pstmtUpdate_tDBOutput_10.setNull(3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_10.setLong(3, BD_Conversion.idmonnaie_2);
}

                        pstmtUpdate_tDBOutput_10.setBigDecimal(4, BD_Conversion.taux_2);

                        if(BD_Conversion.id_user == null) {
pstmtUpdate_tDBOutput_10.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_10.setLong(5, BD_Conversion.id_user);
}

                        if(BD_Conversion.date_creation != null) {
pstmtUpdate_tDBOutput_10.setTimestamp(6, new java.sql.Timestamp(BD_Conversion.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_10.setNull(6, java.sql.Types.DATE);
}

                        if(BD_Conversion.date_last_modif != null) {
pstmtUpdate_tDBOutput_10.setTimestamp(7, new java.sql.Timestamp(BD_Conversion.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_10.setNull(7, java.sql.Types.DATE);
}

                        if(BD_Conversion.est_supprime == null) {
pstmtUpdate_tDBOutput_10.setNull(8, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_10.setLong(8, BD_Conversion.est_supprime);
}


	                    

                        pstmtUpdate_tDBOutput_10.setLong(9 + count_tDBOutput_10, BD_Conversion.idacl_conversion);

            try {
                    updatedCount_tDBOutput_10 = updatedCount_tDBOutput_10 + pstmtUpdate_tDBOutput_10.executeUpdate();
                    nb_line_tDBOutput_10++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_10 = true;
                    	nb_line_tDBOutput_10++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_10.setLong(1, BD_Conversion.idacl_conversion);

                        if(BD_Conversion.idmonnaie_1 == null) {
pstmtInsert_tDBOutput_10.setNull(2, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_10.setLong(2, BD_Conversion.idmonnaie_1);
}

                        pstmtInsert_tDBOutput_10.setBigDecimal(3, BD_Conversion.taux_1);

                        if(BD_Conversion.idmonnaie_2 == null) {
pstmtInsert_tDBOutput_10.setNull(4, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_10.setLong(4, BD_Conversion.idmonnaie_2);
}

                        pstmtInsert_tDBOutput_10.setBigDecimal(5, BD_Conversion.taux_2);

                        if(BD_Conversion.id_user == null) {
pstmtInsert_tDBOutput_10.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_10.setLong(6, BD_Conversion.id_user);
}

                        if(BD_Conversion.date_creation != null) {
pstmtInsert_tDBOutput_10.setTimestamp(7, new java.sql.Timestamp(BD_Conversion.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_10.setNull(7, java.sql.Types.DATE);
}

                        if(BD_Conversion.date_last_modif != null) {
pstmtInsert_tDBOutput_10.setTimestamp(8, new java.sql.Timestamp(BD_Conversion.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_10.setNull(8, java.sql.Types.DATE);
}

                        if(BD_Conversion.est_supprime == null) {
pstmtInsert_tDBOutput_10.setNull(9, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_10.setLong(9, BD_Conversion.est_supprime);
}

            try {
                    insertedCount_tDBOutput_10 = insertedCount_tDBOutput_10 + pstmtInsert_tDBOutput_10.executeUpdate();
                    nb_line_tDBOutput_10++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_10 = true;
                    	nb_line_tDBOutput_10++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_10{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_10) throws Exception {
                try {
						
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							if(countEach_tDBOutput_10 == -2 || countEach_tDBOutput_10 == -3) {
								break;
							}
							counter += countEach_tDBOutput_10;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_10 = 0;
					for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_10) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							if(countEach_tDBOutput_10 == -2 || countEach_tDBOutput_10 == -3) {
								break;
							}
							counter += countEach_tDBOutput_10;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_10++;
                if(commitEvery_tDBOutput_10 <= commitCounter_tDBOutput_10) {
                	
                	conn_tDBOutput_10.commit();
            		
                	commitCounter_tDBOutput_10=0;
                }

 


	tos_count_tDBOutput_10++;

/**
 * [tDBOutput_10 main ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_end ] stop
 */

} // End of branch "BD_Conversion"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tFilterRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
		if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
			
			conn_tDBInput_10.close();
			
		}
		
}

		   globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
		


 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tFilterRow_10 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	
    globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row19"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_10", true);
end_Hash.put("tFilterRow_10", System.currentTimeMillis());




/**
 * [tFilterRow_10 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row20"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_10 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



        if(pstmtUpdate_tDBOutput_10 != null){
            pstmtUpdate_tDBOutput_10.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_10");
        }
        if(pstmtInsert_tDBOutput_10 != null){
            pstmtInsert_tDBOutput_10.close();
            resourceMap.remove("pstmtInsert_tDBOutput_10");
        }
        if(pstmt_tDBOutput_10 != null) {
            pstmt_tDBOutput_10.close();
            resourceMap.remove("pstmt_tDBOutput_10");
        }
    resourceMap.put("statementClosed_tDBOutput_10", true);
            conn_tDBOutput_10.commit();
			
        conn_tDBOutput_10 .close();
        resourceMap.put("finish_tDBOutput_10", true);

	nb_line_deleted_tDBOutput_10=nb_line_deleted_tDBOutput_10+ deletedCount_tDBOutput_10;
	nb_line_update_tDBOutput_10=nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
	nb_line_inserted_tDBOutput_10=nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
	nb_line_rejected_tDBOutput_10=nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;
	
        globalMap.put("tDBOutput_10_NB_LINE",nb_line_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_UPDATED",nb_line_update_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_DELETED",nb_line_deleted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("BD_Conversion"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_10", true);
end_Hash.put("tDBOutput_10", System.currentTimeMillis());




/**
 * [tDBOutput_10 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tFilterRow_10 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_10 = null;
                if ((pstmtUpdateToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_10")) != null) {
                    pstmtUpdateToClose_tDBOutput_10.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_10 = null;
                if ((pstmtInsertToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_10")) != null) {
                    pstmtInsertToClose_tDBOutput_10.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
                if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_10")) != null) {
                    pstmtToClose_tDBOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_10") == null){
            java.sql.Connection ctn_tDBOutput_10 = null;
            if((ctn_tDBOutput_10 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_10")) != null){
                try {
                    ctn_tDBOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_10) {
                    String errorMessage_tDBOutput_10 = "failed to close the connection in tDBOutput_10 :" + sqlEx_tDBOutput_10.getMessage();
                    System.err.println(errorMessage_tDBOutput_10);
                }
            }
        }
    }
 



/**
 * [tDBOutput_10 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class BD_typePersonnelStruct implements routines.system.IPersistableRow<BD_typePersonnelStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_typepersonnel;

				public long getIdacl_typepersonnel () {
					return this.idacl_typepersonnel;
				}
				
			    public String type_personnel;

				public String getType_personnel () {
					return this.type_personnel;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_typepersonnel;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final BD_typePersonnelStruct other = (BD_typePersonnelStruct) obj;
		
						if (this.idacl_typepersonnel != other.idacl_typepersonnel)
							return false;
					

		return true;
    }

	public void copyDataTo(BD_typePersonnelStruct other) {

		other.idacl_typepersonnel = this.idacl_typepersonnel;
	            other.type_personnel = this.type_personnel;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            
	}

	public void copyKeysDataTo(BD_typePersonnelStruct other) {

		other.idacl_typepersonnel = this.idacl_typepersonnel;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_typepersonnel = dis.readLong();
					
					this.type_personnel = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_typepersonnel);
					
					// String
				
						writeString(this.type_personnel,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_typepersonnel="+String.valueOf(idacl_typepersonnel));
		sb.append(",type_personnel="+type_personnel);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(BD_typePersonnelStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_typepersonnel, other.idacl_typepersonnel);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];

	
			    public long idacl_typepersonnel;

				public long getIdacl_typepersonnel () {
					return this.idacl_typepersonnel;
				}
				
			    public String type_personnel;

				public String getType_personnel () {
					return this.type_personnel;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_typepersonnel = dis.readLong();
					
					this.type_personnel = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_typepersonnel);
					
					// String
				
						writeString(this.type_personnel,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_typepersonnel="+String.valueOf(idacl_typepersonnel));
		sb.append(",type_personnel="+type_personnel);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_typepersonnel;

				public long getIdacl_typepersonnel () {
					return this.idacl_typepersonnel;
				}
				
			    public String type_personnel;

				public String getType_personnel () {
					return this.type_personnel;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_typepersonnel;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.idacl_typepersonnel != other.idacl_typepersonnel)
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.idacl_typepersonnel = this.idacl_typepersonnel;
	            other.type_personnel = this.type_personnel;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.idacl_typepersonnel = this.idacl_typepersonnel;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_typepersonnel = dis.readLong();
					
					this.type_personnel = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_typepersonnel);
					
					// String
				
						writeString(this.type_personnel,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_typepersonnel="+String.valueOf(idacl_typepersonnel));
		sb.append(",type_personnel="+type_personnel);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_typepersonnel, other.idacl_typepersonnel);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();
row22Struct row22 = new row22Struct();
BD_typePersonnelStruct BD_typePersonnel = new BD_typePersonnelStruct();






	
	/**
	 * [tDBOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_11", false);
		start_Hash.put("tDBOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("BD_typePersonnel" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_11 = 0;
		



int nb_line_tDBOutput_11 = 0;
int nb_line_update_tDBOutput_11 = 0;
int nb_line_inserted_tDBOutput_11 = 0;
int nb_line_deleted_tDBOutput_11 = 0;
int nb_line_rejected_tDBOutput_11 = 0;

int deletedCount_tDBOutput_11=0;
int updatedCount_tDBOutput_11=0;
int insertedCount_tDBOutput_11=0;
int rejectedCount_tDBOutput_11=0;
String dbschema_tDBOutput_11 = null;
String tableName_tDBOutput_11 = null;
boolean whetherReject_tDBOutput_11 = false;

java.util.Calendar calendar_tDBOutput_11 = java.util.Calendar.getInstance();
long year1_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_11;

java.util.Calendar calendar_datetimeoffset_tDBOutput_11 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_11 = 1;
        if(updateKeyCount_tDBOutput_11 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_11 = null;
String dbUser_tDBOutput_11 = null;
    dbschema_tDBOutput_11 = "";
    String driverClass_tDBOutput_11 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_11);
    String port_tDBOutput_11 = "1433";
    String dbname_tDBOutput_11 = "GestEntCom" ;
    String url_tDBOutput_11 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_11)) {
    	url_tDBOutput_11 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_11)) {
				url_tDBOutput_11 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_11 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_11 = "sa";

 
	final String decryptedPassword_tDBOutput_11 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;	
    conn_tDBOutput_11 = java.sql.DriverManager.getConnection(url_tDBOutput_11,dbUser_tDBOutput_11,dbPwd_tDBOutput_11);
	
		resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);
	
        conn_tDBOutput_11.setAutoCommit(false);
        int commitEvery_tDBOutput_11 = 10000;
        int commitCounter_tDBOutput_11 = 0;


if(dbschema_tDBOutput_11 == null || dbschema_tDBOutput_11.trim().length() == 0) {
    tableName_tDBOutput_11 = "acl_typepersonnel";
} else {
    tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "].[" + "acl_typepersonnel";
}
	int count_tDBOutput_11=0;

                                boolean whetherExist_tDBOutput_11 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_11.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_11 + "]" );
                                        whetherExist_tDBOutput_11 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_11 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_11) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                                        stmtCreate_tDBOutput_11.execute("CREATE TABLE [" + tableName_tDBOutput_11 + "]([idacl_typepersonnel] BIGINT  not null ,[type_personnel] VARCHAR(45)  ,[id_user] BIGINT ,[est_supprime] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,primary key([idacl_typepersonnel]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_11 + "] WHERE [idacl_typepersonnel] = ?");
        resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);
        String insert_tDBOutput_11 = "INSERT INTO [" + tableName_tDBOutput_11 + "] ([idacl_typepersonnel],[type_personnel],[id_user],[est_supprime],[date_creation],[date_last_modif]) VALUES (?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
        resourceMap.put("pstmtInsert_tDBOutput_11", pstmtInsert_tDBOutput_11);
        String update_tDBOutput_11 = "UPDATE [" + tableName_tDBOutput_11 + "] SET [type_personnel] = ?,[id_user] = ?,[est_supprime] = ?,[date_creation] = ?,[date_last_modif] = ? WHERE [idacl_typepersonnel] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(update_tDBOutput_11);
        resourceMap.put("pstmtUpdate_tDBOutput_11", pstmtUpdate_tDBOutput_11);

 



/**
 * [tDBOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row22" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
BD_typePersonnelStruct BD_typePersonnel_tmp = new BD_typePersonnelStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tFilterRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_11", false);
		start_Hash.put("tFilterRow_11", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row21" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_11 = 0;
		
    int nb_line_tFilterRow_11 = 0;
    int nb_line_ok_tFilterRow_11 = 0;
    int nb_line_reject_tFilterRow_11 = 0;

    class Operator_tFilterRow_11 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_11(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_11 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_11 = java.util.Calendar.getInstance();
		    calendar_tDBInput_11.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_11 = calendar_tDBInput_11.getTime();
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_11);
					String dbUser_tDBInput_11 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT \n  `acl_typepersonnel`.`idacl_typepersonnel`, \n  `acl_typepersonnel`.`type_personnel`, \n  `acl_typepersonnel`.`i"
+"d_user`, \n  `acl_typepersonnel`.`est_supprime`, \n  `acl_typepersonnel`.`date_creation`, \n  `acl_typepersonnel`.`date_las"
+"t_modif`\nFROM `acl_typepersonnel`";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row21.idacl_typepersonnel = 0;
							} else {
		                          
            if(rs_tDBInput_11.getObject(1) != null) {
                row21.idacl_typepersonnel = rs_tDBInput_11.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row21.type_personnel = null;
							} else {
	                         		
        	row21.type_personnel = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row21.id_user = null;
							} else {
		                          
            if(rs_tDBInput_11.getObject(3) != null) {
                row21.id_user = rs_tDBInput_11.getLong(3);
            } else {
                    row21.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row21.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_11.getObject(4) != null) {
                row21.est_supprime = rs_tDBInput_11.getLong(4);
            } else {
                    row21.est_supprime = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								row21.date_creation = null;
							} else {
										
				if(rs_tDBInput_11.getString(5) != null) {
					String dateString_tDBInput_11 = rs_tDBInput_11.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_11) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_11)) {
						row21.date_creation = rs_tDBInput_11.getTimestamp(5);
					} else {
						row21.date_creation = (java.util.Date) year0_tDBInput_11.clone();
					}
				} else {
					row21.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_11 < 6) {
								row21.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_11.getString(6) != null) {
					String dateString_tDBInput_11 = rs_tDBInput_11.getString(6);
					if (!("0000-00-00").equals(dateString_tDBInput_11) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_11)) {
						row21.date_last_modif = rs_tDBInput_11.getTimestamp(6);
					} else {
						row21.date_last_modif = (java.util.Date) year0_tDBInput_11.clone();
					}
				} else {
					row21.date_last_modif =  null;
				}
		                    }
					

 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_11 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

			//row21
			//row21


			
				if(execStat){
					runStat.updateStatOnConnection("row21"+iterateId,1, 1);
				} 
			

		

          row22 = null;
    Operator_tFilterRow_11 ope_tFilterRow_11 = new Operator_tFilterRow_11("||");
            ope_tFilterRow_11.matches((row21.est_supprime == null? false : row21.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_11.matches((row21.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_11.getMatchFlag()) {
              if(row22 == null){ 
                row22 = new row22Struct();
              }
               row22.idacl_typepersonnel = row21.idacl_typepersonnel;
               row22.type_personnel = row21.type_personnel;
               row22.id_user = row21.id_user;
               row22.est_supprime = row21.est_supprime;
               row22.date_creation = row21.date_creation;
               row22.date_last_modif = row21.date_last_modif;    
      nb_line_ok_tFilterRow_11++;
    } else {
      nb_line_reject_tFilterRow_11++;
    }

nb_line_tFilterRow_11++;

 


	tos_count_tFilterRow_11++;

/**
 * [tFilterRow_11 main ] stop
 */
	
	/**
	 * [tFilterRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//row22
			//row22


			
				if(execStat){
					runStat.updateStatOnConnection("row22"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

BD_typePersonnel = null;


// # Output table : 'BD_typePersonnel'
BD_typePersonnel_tmp.idacl_typepersonnel = row22.idacl_typepersonnel ;
BD_typePersonnel_tmp.type_personnel = row22.type_personnel ;
BD_typePersonnel_tmp.id_user = row22.id_user ;
BD_typePersonnel_tmp.est_supprime = row22.est_supprime ;
BD_typePersonnel_tmp.date_creation = row22.date_creation ;
BD_typePersonnel_tmp.date_last_modif = row22.date_last_modif ;
BD_typePersonnel = BD_typePersonnel_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "BD_typePersonnel"
if(BD_typePersonnel != null) { 



	
	/**
	 * [tDBOutput_11 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

			//BD_typePersonnel
			//BD_typePersonnel


			
				if(execStat){
					runStat.updateStatOnConnection("BD_typePersonnel"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_11 = false;


                    pstmt_tDBOutput_11.setLong(1, BD_typePersonnel.idacl_typepersonnel);

            int checkCount_tDBOutput_11 = -1;
            try (java.sql.ResultSet rs_tDBOutput_11 = pstmt_tDBOutput_11.executeQuery()) {
                while(rs_tDBOutput_11.next()) {
                    checkCount_tDBOutput_11 = rs_tDBOutput_11.getInt(1);
                }
            }
            if(checkCount_tDBOutput_11 > 0) {
                        if(BD_typePersonnel.type_personnel == null) {
pstmtUpdate_tDBOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_11.setString(1, BD_typePersonnel.type_personnel);
}

                        if(BD_typePersonnel.id_user == null) {
pstmtUpdate_tDBOutput_11.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_11.setLong(2, BD_typePersonnel.id_user);
}

                        if(BD_typePersonnel.est_supprime == null) {
pstmtUpdate_tDBOutput_11.setNull(3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_11.setLong(3, BD_typePersonnel.est_supprime);
}

                        if(BD_typePersonnel.date_creation != null) {
pstmtUpdate_tDBOutput_11.setTimestamp(4, new java.sql.Timestamp(BD_typePersonnel.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_11.setNull(4, java.sql.Types.DATE);
}

                        if(BD_typePersonnel.date_last_modif != null) {
pstmtUpdate_tDBOutput_11.setTimestamp(5, new java.sql.Timestamp(BD_typePersonnel.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_11.setNull(5, java.sql.Types.DATE);
}


	                    

                        pstmtUpdate_tDBOutput_11.setLong(6 + count_tDBOutput_11, BD_typePersonnel.idacl_typepersonnel);

            try {
                    updatedCount_tDBOutput_11 = updatedCount_tDBOutput_11 + pstmtUpdate_tDBOutput_11.executeUpdate();
                    nb_line_tDBOutput_11++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_11 = true;
                    	nb_line_tDBOutput_11++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_11.setLong(1, BD_typePersonnel.idacl_typepersonnel);

                        if(BD_typePersonnel.type_personnel == null) {
pstmtInsert_tDBOutput_11.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_11.setString(2, BD_typePersonnel.type_personnel);
}

                        if(BD_typePersonnel.id_user == null) {
pstmtInsert_tDBOutput_11.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_11.setLong(3, BD_typePersonnel.id_user);
}

                        if(BD_typePersonnel.est_supprime == null) {
pstmtInsert_tDBOutput_11.setNull(4, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_11.setLong(4, BD_typePersonnel.est_supprime);
}

                        if(BD_typePersonnel.date_creation != null) {
pstmtInsert_tDBOutput_11.setTimestamp(5, new java.sql.Timestamp(BD_typePersonnel.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_11.setNull(5, java.sql.Types.DATE);
}

                        if(BD_typePersonnel.date_last_modif != null) {
pstmtInsert_tDBOutput_11.setTimestamp(6, new java.sql.Timestamp(BD_typePersonnel.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_11.setNull(6, java.sql.Types.DATE);
}

            try {
                    insertedCount_tDBOutput_11 = insertedCount_tDBOutput_11 + pstmtInsert_tDBOutput_11.executeUpdate();
                    nb_line_tDBOutput_11++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_11 = true;
                    	nb_line_tDBOutput_11++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_11{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_11) throws Exception {
                try {
						
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							if(countEach_tDBOutput_11 == -2 || countEach_tDBOutput_11 == -3) {
								break;
							}
							counter += countEach_tDBOutput_11;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_11 = 0;
					for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_11) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							if(countEach_tDBOutput_11 == -2 || countEach_tDBOutput_11 == -3) {
								break;
							}
							counter += countEach_tDBOutput_11;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_11++;
                if(commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {
                	
                	conn_tDBOutput_11.commit();
            		
                	commitCounter_tDBOutput_11=0;
                }

 


	tos_count_tDBOutput_11++;

/**
 * [tDBOutput_11 main ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_end ] stop
 */

} // End of branch "BD_typePersonnel"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "row22"




	
	/**
	 * [tFilterRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
		if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
			
			conn_tDBInput_11.close();
			
		}
		
}

		   globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
		


 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tFilterRow_11 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	
    globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row21"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_11", true);
end_Hash.put("tFilterRow_11", System.currentTimeMillis());




/**
 * [tFilterRow_11 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row22"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_11 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



        if(pstmtUpdate_tDBOutput_11 != null){
            pstmtUpdate_tDBOutput_11.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_11");
        }
        if(pstmtInsert_tDBOutput_11 != null){
            pstmtInsert_tDBOutput_11.close();
            resourceMap.remove("pstmtInsert_tDBOutput_11");
        }
        if(pstmt_tDBOutput_11 != null) {
            pstmt_tDBOutput_11.close();
            resourceMap.remove("pstmt_tDBOutput_11");
        }
    resourceMap.put("statementClosed_tDBOutput_11", true);
            conn_tDBOutput_11.commit();
			
        conn_tDBOutput_11 .close();
        resourceMap.put("finish_tDBOutput_11", true);

	nb_line_deleted_tDBOutput_11=nb_line_deleted_tDBOutput_11+ deletedCount_tDBOutput_11;
	nb_line_update_tDBOutput_11=nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
	nb_line_inserted_tDBOutput_11=nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
	nb_line_rejected_tDBOutput_11=nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;
	
        globalMap.put("tDBOutput_11_NB_LINE",nb_line_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_UPDATED",nb_line_update_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_DELETED",nb_line_deleted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("BD_typePersonnel"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_11", true);
end_Hash.put("tDBOutput_11", System.currentTimeMillis());




/**
 * [tDBOutput_11 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tFilterRow_11 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_11 = null;
                if ((pstmtUpdateToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_11")) != null) {
                    pstmtUpdateToClose_tDBOutput_11.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_11 = null;
                if ((pstmtInsertToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_11")) != null) {
                    pstmtInsertToClose_tDBOutput_11.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
                if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_11")) != null) {
                    pstmtToClose_tDBOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_11") == null){
            java.sql.Connection ctn_tDBOutput_11 = null;
            if((ctn_tDBOutput_11 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_11")) != null){
                try {
                    ctn_tDBOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_11) {
                    String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :" + sqlEx_tDBOutput_11.getMessage();
                    System.err.println(errorMessage_tDBOutput_11);
                }
            }
        }
    }
 



/**
 * [tDBOutput_11 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class BD_MonnaieStruct implements routines.system.IPersistableRow<BD_MonnaieStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_monnaie;

				public long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public String monnaie;

				public String getMonnaie () {
					return this.monnaie;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_monnaie;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final BD_MonnaieStruct other = (BD_MonnaieStruct) obj;
		
						if (this.idacl_monnaie != other.idacl_monnaie)
							return false;
					

		return true;
    }

	public void copyDataTo(BD_MonnaieStruct other) {

		other.idacl_monnaie = this.idacl_monnaie;
	            other.monnaie = this.monnaie;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(BD_MonnaieStruct other) {

		other.idacl_monnaie = this.idacl_monnaie;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_monnaie = dis.readLong();
					
					this.monnaie = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_monnaie);
					
					// String
				
						writeString(this.monnaie,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",monnaie="+monnaie);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(BD_MonnaieStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_monnaie, other.idacl_monnaie);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];

	
			    public long idacl_monnaie;

				public long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public String monnaie;

				public String getMonnaie () {
					return this.monnaie;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_monnaie = dis.readLong();
					
					this.monnaie = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_monnaie);
					
					// String
				
						writeString(this.monnaie,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",monnaie="+monnaie);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_monnaie;

				public long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public String monnaie;

				public String getMonnaie () {
					return this.monnaie;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_monnaie;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.idacl_monnaie != other.idacl_monnaie)
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.idacl_monnaie = this.idacl_monnaie;
	            other.monnaie = this.monnaie;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.idacl_monnaie = this.idacl_monnaie;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_monnaie = dis.readLong();
					
					this.monnaie = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_monnaie);
					
					// String
				
						writeString(this.monnaie,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",monnaie="+monnaie);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_monnaie, other.idacl_monnaie);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();
row24Struct row24 = new row24Struct();
BD_MonnaieStruct BD_Monnaie = new BD_MonnaieStruct();






	
	/**
	 * [tDBOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_12", false);
		start_Hash.put("tDBOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("BD_Monnaie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_12 = 0;
		



int nb_line_tDBOutput_12 = 0;
int nb_line_update_tDBOutput_12 = 0;
int nb_line_inserted_tDBOutput_12 = 0;
int nb_line_deleted_tDBOutput_12 = 0;
int nb_line_rejected_tDBOutput_12 = 0;

int deletedCount_tDBOutput_12=0;
int updatedCount_tDBOutput_12=0;
int insertedCount_tDBOutput_12=0;
int rejectedCount_tDBOutput_12=0;
String dbschema_tDBOutput_12 = null;
String tableName_tDBOutput_12 = null;
boolean whetherReject_tDBOutput_12 = false;

java.util.Calendar calendar_tDBOutput_12 = java.util.Calendar.getInstance();
long year1_tDBOutput_12 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_12 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_12 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_12;

java.util.Calendar calendar_datetimeoffset_tDBOutput_12 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_12 = 1;
        if(updateKeyCount_tDBOutput_12 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_12 = null;
String dbUser_tDBOutput_12 = null;
    dbschema_tDBOutput_12 = "";
    String driverClass_tDBOutput_12 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_12);
    String port_tDBOutput_12 = "1433";
    String dbname_tDBOutput_12 = "GestEntCom" ;
    String url_tDBOutput_12 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_12)) {
    	url_tDBOutput_12 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_12)) {
				url_tDBOutput_12 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_12 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_12 = "sa";

 
	final String decryptedPassword_tDBOutput_12 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_12 = decryptedPassword_tDBOutput_12;	
    conn_tDBOutput_12 = java.sql.DriverManager.getConnection(url_tDBOutput_12,dbUser_tDBOutput_12,dbPwd_tDBOutput_12);
	
		resourceMap.put("conn_tDBOutput_12", conn_tDBOutput_12);
	
        conn_tDBOutput_12.setAutoCommit(false);
        int commitEvery_tDBOutput_12 = 10000;
        int commitCounter_tDBOutput_12 = 0;


if(dbschema_tDBOutput_12 == null || dbschema_tDBOutput_12.trim().length() == 0) {
    tableName_tDBOutput_12 = "acl_monnaie";
} else {
    tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "].[" + "acl_monnaie";
}
	int count_tDBOutput_12=0;

                                boolean whetherExist_tDBOutput_12 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_12.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_12 + "]" );
                                        whetherExist_tDBOutput_12 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_12 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_12) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
                                        stmtCreate_tDBOutput_12.execute("CREATE TABLE [" + tableName_tDBOutput_12 + "]([idacl_monnaie] BIGINT  not null ,[monnaie] VARCHAR(20)  ,[id_user] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[est_supprime] BIGINT ,primary key([idacl_monnaie]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_12 + "] WHERE [idacl_monnaie] = ?");
        resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);
        String insert_tDBOutput_12 = "INSERT INTO [" + tableName_tDBOutput_12 + "] ([idacl_monnaie],[monnaie],[id_user],[date_creation],[date_last_modif],[est_supprime]) VALUES (?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(insert_tDBOutput_12);
        resourceMap.put("pstmtInsert_tDBOutput_12", pstmtInsert_tDBOutput_12);
        String update_tDBOutput_12 = "UPDATE [" + tableName_tDBOutput_12 + "] SET [monnaie] = ?,[id_user] = ?,[date_creation] = ?,[date_last_modif] = ?,[est_supprime] = ? WHERE [idacl_monnaie] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(update_tDBOutput_12);
        resourceMap.put("pstmtUpdate_tDBOutput_12", pstmtUpdate_tDBOutput_12);

 



/**
 * [tDBOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row24" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
BD_MonnaieStruct BD_Monnaie_tmp = new BD_MonnaieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tFilterRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_12", false);
		start_Hash.put("tFilterRow_12", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row23" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_12 = 0;
		
    int nb_line_tFilterRow_12 = 0;
    int nb_line_ok_tFilterRow_12 = 0;
    int nb_line_reject_tFilterRow_12 = 0;

    class Operator_tFilterRow_12 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_12(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_12 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_12 = java.util.Calendar.getInstance();
		    calendar_tDBInput_12.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_12 = calendar_tDBInput_12.getTime();
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_12);
					String dbUser_tDBInput_12 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_12 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
				String url_tDBInput_12 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT \n  `acl_monnaie`.`idacl_monnaie`, \n  `acl_monnaie`.`monnaie`, \n  `acl_monnaie`.`id_user`, \n  `acl_monnaie`.`date"
+"_creation`, \n  `acl_monnaie`.`date_last_modif`, \n  `acl_monnaie`.`est_supprime`\nFROM `acl_monnaie`";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row23.idacl_monnaie = 0;
							} else {
		                          
            if(rs_tDBInput_12.getObject(1) != null) {
                row23.idacl_monnaie = rs_tDBInput_12.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								row23.monnaie = null;
							} else {
	                         		
        	row23.monnaie = routines.system.JDBCUtil.getString(rs_tDBInput_12, 2, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								row23.id_user = null;
							} else {
		                          
            if(rs_tDBInput_12.getObject(3) != null) {
                row23.id_user = rs_tDBInput_12.getLong(3);
            } else {
                    row23.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								row23.date_creation = null;
							} else {
										
				if(rs_tDBInput_12.getString(4) != null) {
					String dateString_tDBInput_12 = rs_tDBInput_12.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_12) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_12)) {
						row23.date_creation = rs_tDBInput_12.getTimestamp(4);
					} else {
						row23.date_creation = (java.util.Date) year0_tDBInput_12.clone();
					}
				} else {
					row23.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_12 < 5) {
								row23.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_12.getString(5) != null) {
					String dateString_tDBInput_12 = rs_tDBInput_12.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_12) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_12)) {
						row23.date_last_modif = rs_tDBInput_12.getTimestamp(5);
					} else {
						row23.date_last_modif = (java.util.Date) year0_tDBInput_12.clone();
					}
				} else {
					row23.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_12 < 6) {
								row23.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_12.getObject(6) != null) {
                row23.est_supprime = rs_tDBInput_12.getLong(6);
            } else {
                    row23.est_supprime = null;
            }
		                    }
					

 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_12 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

			//row23
			//row23


			
				if(execStat){
					runStat.updateStatOnConnection("row23"+iterateId,1, 1);
				} 
			

		

          row24 = null;
    Operator_tFilterRow_12 ope_tFilterRow_12 = new Operator_tFilterRow_12("||");
            ope_tFilterRow_12.matches((row23.est_supprime == null? false : row23.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_12.matches((row23.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_12.getMatchFlag()) {
              if(row24 == null){ 
                row24 = new row24Struct();
              }
               row24.idacl_monnaie = row23.idacl_monnaie;
               row24.monnaie = row23.monnaie;
               row24.id_user = row23.id_user;
               row24.date_creation = row23.date_creation;
               row24.date_last_modif = row23.date_last_modif;
               row24.est_supprime = row23.est_supprime;    
      nb_line_ok_tFilterRow_12++;
    } else {
      nb_line_reject_tFilterRow_12++;
    }

nb_line_tFilterRow_12++;

 


	tos_count_tFilterRow_12++;

/**
 * [tFilterRow_12 main ] stop
 */
	
	/**
	 * [tFilterRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

			//row24
			//row24


			
				if(execStat){
					runStat.updateStatOnConnection("row24"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

BD_Monnaie = null;


// # Output table : 'BD_Monnaie'
BD_Monnaie_tmp.idacl_monnaie = row24.idacl_monnaie ;
BD_Monnaie_tmp.monnaie = row24.monnaie ;
BD_Monnaie_tmp.id_user = row24.id_user ;
BD_Monnaie_tmp.date_creation = row24.date_creation ;
BD_Monnaie_tmp.date_last_modif = row24.date_last_modif ;
BD_Monnaie_tmp.est_supprime = row24.est_supprime ;
BD_Monnaie = BD_Monnaie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "BD_Monnaie"
if(BD_Monnaie != null) { 



	
	/**
	 * [tDBOutput_12 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

			//BD_Monnaie
			//BD_Monnaie


			
				if(execStat){
					runStat.updateStatOnConnection("BD_Monnaie"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_12 = false;


                    pstmt_tDBOutput_12.setLong(1, BD_Monnaie.idacl_monnaie);

            int checkCount_tDBOutput_12 = -1;
            try (java.sql.ResultSet rs_tDBOutput_12 = pstmt_tDBOutput_12.executeQuery()) {
                while(rs_tDBOutput_12.next()) {
                    checkCount_tDBOutput_12 = rs_tDBOutput_12.getInt(1);
                }
            }
            if(checkCount_tDBOutput_12 > 0) {
                        if(BD_Monnaie.monnaie == null) {
pstmtUpdate_tDBOutput_12.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_12.setString(1, BD_Monnaie.monnaie);
}

                        if(BD_Monnaie.id_user == null) {
pstmtUpdate_tDBOutput_12.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_12.setLong(2, BD_Monnaie.id_user);
}

                        if(BD_Monnaie.date_creation != null) {
pstmtUpdate_tDBOutput_12.setTimestamp(3, new java.sql.Timestamp(BD_Monnaie.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_12.setNull(3, java.sql.Types.DATE);
}

                        if(BD_Monnaie.date_last_modif != null) {
pstmtUpdate_tDBOutput_12.setTimestamp(4, new java.sql.Timestamp(BD_Monnaie.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_12.setNull(4, java.sql.Types.DATE);
}

                        if(BD_Monnaie.est_supprime == null) {
pstmtUpdate_tDBOutput_12.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_12.setLong(5, BD_Monnaie.est_supprime);
}


	                    

                        pstmtUpdate_tDBOutput_12.setLong(6 + count_tDBOutput_12, BD_Monnaie.idacl_monnaie);

            try {
                    updatedCount_tDBOutput_12 = updatedCount_tDBOutput_12 + pstmtUpdate_tDBOutput_12.executeUpdate();
                    nb_line_tDBOutput_12++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_12 = true;
                    	nb_line_tDBOutput_12++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_12.setLong(1, BD_Monnaie.idacl_monnaie);

                        if(BD_Monnaie.monnaie == null) {
pstmtInsert_tDBOutput_12.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_12.setString(2, BD_Monnaie.monnaie);
}

                        if(BD_Monnaie.id_user == null) {
pstmtInsert_tDBOutput_12.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_12.setLong(3, BD_Monnaie.id_user);
}

                        if(BD_Monnaie.date_creation != null) {
pstmtInsert_tDBOutput_12.setTimestamp(4, new java.sql.Timestamp(BD_Monnaie.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_12.setNull(4, java.sql.Types.DATE);
}

                        if(BD_Monnaie.date_last_modif != null) {
pstmtInsert_tDBOutput_12.setTimestamp(5, new java.sql.Timestamp(BD_Monnaie.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_12.setNull(5, java.sql.Types.DATE);
}

                        if(BD_Monnaie.est_supprime == null) {
pstmtInsert_tDBOutput_12.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_12.setLong(6, BD_Monnaie.est_supprime);
}

            try {
                    insertedCount_tDBOutput_12 = insertedCount_tDBOutput_12 + pstmtInsert_tDBOutput_12.executeUpdate();
                    nb_line_tDBOutput_12++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_12 = true;
                    	nb_line_tDBOutput_12++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_12{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_12) throws Exception {
                try {
						
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							if(countEach_tDBOutput_12 == -2 || countEach_tDBOutput_12 == -3) {
								break;
							}
							counter += countEach_tDBOutput_12;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_12 = 0;
					for(int countEach_tDBOutput_12: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_12) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							if(countEach_tDBOutput_12 == -2 || countEach_tDBOutput_12 == -3) {
								break;
							}
							counter += countEach_tDBOutput_12;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_12: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_12++;
                if(commitEvery_tDBOutput_12 <= commitCounter_tDBOutput_12) {
                	
                	conn_tDBOutput_12.commit();
            		
                	commitCounter_tDBOutput_12=0;
                }

 


	tos_count_tDBOutput_12++;

/**
 * [tDBOutput_12 main ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_end ] stop
 */

} // End of branch "BD_Monnaie"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "row24"




	
	/**
	 * [tFilterRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
		if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
			
			conn_tDBInput_12.close();
			
		}
		
}

		   globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
		


 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tFilterRow_12 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	
    globalMap.put("tFilterRow_12_NB_LINE", nb_line_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_OK", nb_line_ok_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_REJECT", nb_line_reject_tFilterRow_12);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row23"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_12", true);
end_Hash.put("tFilterRow_12", System.currentTimeMillis());




/**
 * [tFilterRow_12 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row24"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_12 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



        if(pstmtUpdate_tDBOutput_12 != null){
            pstmtUpdate_tDBOutput_12.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_12");
        }
        if(pstmtInsert_tDBOutput_12 != null){
            pstmtInsert_tDBOutput_12.close();
            resourceMap.remove("pstmtInsert_tDBOutput_12");
        }
        if(pstmt_tDBOutput_12 != null) {
            pstmt_tDBOutput_12.close();
            resourceMap.remove("pstmt_tDBOutput_12");
        }
    resourceMap.put("statementClosed_tDBOutput_12", true);
            conn_tDBOutput_12.commit();
			
        conn_tDBOutput_12 .close();
        resourceMap.put("finish_tDBOutput_12", true);

	nb_line_deleted_tDBOutput_12=nb_line_deleted_tDBOutput_12+ deletedCount_tDBOutput_12;
	nb_line_update_tDBOutput_12=nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
	nb_line_inserted_tDBOutput_12=nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
	nb_line_rejected_tDBOutput_12=nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;
	
        globalMap.put("tDBOutput_12_NB_LINE",nb_line_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_UPDATED",nb_line_update_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_DELETED",nb_line_deleted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("BD_Monnaie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_12", true);
end_Hash.put("tDBOutput_12", System.currentTimeMillis());




/**
 * [tDBOutput_12 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tFilterRow_12 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_12 = null;
                if ((pstmtUpdateToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_12")) != null) {
                    pstmtUpdateToClose_tDBOutput_12.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_12 = null;
                if ((pstmtInsertToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_12")) != null) {
                    pstmtInsertToClose_tDBOutput_12.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
                if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_12")) != null) {
                    pstmtToClose_tDBOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_12") == null){
            java.sql.Connection ctn_tDBOutput_12 = null;
            if((ctn_tDBOutput_12 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_12")) != null){
                try {
                    ctn_tDBOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_12) {
                    String errorMessage_tDBOutput_12 = "failed to close the connection in tDBOutput_12 :" + sqlEx_tDBOutput_12.getMessage();
                    System.err.println(errorMessage_tDBOutput_12);
                }
            }
        }
    }
 



/**
 * [tDBOutput_12 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class BD_VehiculeStruct implements routines.system.IPersistableRow<BD_VehiculeStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_vehicule;

				public long getIdacl_vehicule () {
					return this.idacl_vehicule;
				}
				
			    public String matricule;

				public String getMatricule () {
					return this.matricule;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public BigDecimal volumetrie;

				public BigDecimal getVolumetrie () {
					return this.volumetrie;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_vehicule;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final BD_VehiculeStruct other = (BD_VehiculeStruct) obj;
		
						if (this.idacl_vehicule != other.idacl_vehicule)
							return false;
					

		return true;
    }

	public void copyDataTo(BD_VehiculeStruct other) {

		other.idacl_vehicule = this.idacl_vehicule;
	            other.matricule = this.matricule;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            other.volumetrie = this.volumetrie;
	            
	}

	public void copyKeysDataTo(BD_VehiculeStruct other) {

		other.idacl_vehicule = this.idacl_vehicule;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_vehicule = dis.readLong();
					
					this.matricule = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
						this.volumetrie = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_vehicule);
					
					// String
				
						writeString(this.matricule,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.volumetrie);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_vehicule="+String.valueOf(idacl_vehicule));
		sb.append(",matricule="+matricule);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",volumetrie="+String.valueOf(volumetrie));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(BD_VehiculeStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_vehicule, other.idacl_vehicule);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];

	
			    public long idacl_vehicule;

				public long getIdacl_vehicule () {
					return this.idacl_vehicule;
				}
				
			    public String matricule;

				public String getMatricule () {
					return this.matricule;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public BigDecimal volumetrie;

				public BigDecimal getVolumetrie () {
					return this.volumetrie;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_vehicule = dis.readLong();
					
					this.matricule = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
						this.volumetrie = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_vehicule);
					
					// String
				
						writeString(this.matricule,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.volumetrie);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_vehicule="+String.valueOf(idacl_vehicule));
		sb.append(",matricule="+matricule);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",volumetrie="+String.valueOf(volumetrie));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_vehicule;

				public long getIdacl_vehicule () {
					return this.idacl_vehicule;
				}
				
			    public String matricule;

				public String getMatricule () {
					return this.matricule;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public BigDecimal volumetrie;

				public BigDecimal getVolumetrie () {
					return this.volumetrie;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_vehicule;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.idacl_vehicule != other.idacl_vehicule)
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.idacl_vehicule = this.idacl_vehicule;
	            other.matricule = this.matricule;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            other.volumetrie = this.volumetrie;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.idacl_vehicule = this.idacl_vehicule;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_vehicule = dis.readLong();
					
					this.matricule = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
						this.volumetrie = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_vehicule);
					
					// String
				
						writeString(this.matricule,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.volumetrie);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_vehicule="+String.valueOf(idacl_vehicule));
		sb.append(",matricule="+matricule);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",volumetrie="+String.valueOf(volumetrie));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_vehicule, other.idacl_vehicule);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();
row26Struct row26 = new row26Struct();
BD_VehiculeStruct BD_Vehicule = new BD_VehiculeStruct();






	
	/**
	 * [tDBOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_13", false);
		start_Hash.put("tDBOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("BD_Vehicule" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_13 = 0;
		



int nb_line_tDBOutput_13 = 0;
int nb_line_update_tDBOutput_13 = 0;
int nb_line_inserted_tDBOutput_13 = 0;
int nb_line_deleted_tDBOutput_13 = 0;
int nb_line_rejected_tDBOutput_13 = 0;

int deletedCount_tDBOutput_13=0;
int updatedCount_tDBOutput_13=0;
int insertedCount_tDBOutput_13=0;
int rejectedCount_tDBOutput_13=0;
String dbschema_tDBOutput_13 = null;
String tableName_tDBOutput_13 = null;
boolean whetherReject_tDBOutput_13 = false;

java.util.Calendar calendar_tDBOutput_13 = java.util.Calendar.getInstance();
long year1_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_13;

java.util.Calendar calendar_datetimeoffset_tDBOutput_13 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_13 = 1;
        if(updateKeyCount_tDBOutput_13 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_13 = null;
String dbUser_tDBOutput_13 = null;
    dbschema_tDBOutput_13 = "";
    String driverClass_tDBOutput_13 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_13);
    String port_tDBOutput_13 = "1433";
    String dbname_tDBOutput_13 = "GestEntCom" ;
    String url_tDBOutput_13 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_13)) {
    	url_tDBOutput_13 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_13)) {
				url_tDBOutput_13 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_13 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_13 = "sa";

 
	final String decryptedPassword_tDBOutput_13 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_13 = decryptedPassword_tDBOutput_13;	
    conn_tDBOutput_13 = java.sql.DriverManager.getConnection(url_tDBOutput_13,dbUser_tDBOutput_13,dbPwd_tDBOutput_13);
	
		resourceMap.put("conn_tDBOutput_13", conn_tDBOutput_13);
	
        conn_tDBOutput_13.setAutoCommit(false);
        int commitEvery_tDBOutput_13 = 10000;
        int commitCounter_tDBOutput_13 = 0;


if(dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
    tableName_tDBOutput_13 = "acl_vehicule";
} else {
    tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "].[" + "acl_vehicule";
}
	int count_tDBOutput_13=0;

                                boolean whetherExist_tDBOutput_13 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_13 = conn_tDBOutput_13.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_13.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_13 + "]" );
                                        whetherExist_tDBOutput_13 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_13 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_13) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_13 = conn_tDBOutput_13.createStatement()) {
                                        stmtCreate_tDBOutput_13.execute("CREATE TABLE [" + tableName_tDBOutput_13 + "]([idacl_vehicule] BIGINT  not null ,[matricule] VARCHAR(15)  ,[id_user] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[est_supprime] BIGINT ,[volumetrie] DECIMAL(10,2)  ,primary key([idacl_vehicule]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_13 + "] WHERE [idacl_vehicule] = ?");
        resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);
        String insert_tDBOutput_13 = "INSERT INTO [" + tableName_tDBOutput_13 + "] ([idacl_vehicule],[matricule],[id_user],[date_creation],[date_last_modif],[est_supprime],[volumetrie]) VALUES (?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
        resourceMap.put("pstmtInsert_tDBOutput_13", pstmtInsert_tDBOutput_13);
        String update_tDBOutput_13 = "UPDATE [" + tableName_tDBOutput_13 + "] SET [matricule] = ?,[id_user] = ?,[date_creation] = ?,[date_last_modif] = ?,[est_supprime] = ?,[volumetrie] = ? WHERE [idacl_vehicule] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(update_tDBOutput_13);
        resourceMap.put("pstmtUpdate_tDBOutput_13", pstmtUpdate_tDBOutput_13);

 



/**
 * [tDBOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row26" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
BD_VehiculeStruct BD_Vehicule_tmp = new BD_VehiculeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tFilterRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_13", false);
		start_Hash.put("tFilterRow_13", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row25" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_13 = 0;
		
    int nb_line_tFilterRow_13 = 0;
    int nb_line_ok_tFilterRow_13 = 0;
    int nb_line_reject_tFilterRow_13 = 0;

    class Operator_tFilterRow_13 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_13(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_13 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_13 = java.util.Calendar.getInstance();
		    calendar_tDBInput_13.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_13 = calendar_tDBInput_13.getTime();
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_13);
					String dbUser_tDBInput_13 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_13 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
				String url_tDBInput_13 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT \n  `acl_vehicule`.`idacl_vehicule`, \n  `acl_vehicule`.`matricule`, \n  `acl_vehicule`.`id_user`, \n  `acl_vehicule"
+"`.`date_creation`, \n  `acl_vehicule`.`date_last_modif`, \n  `acl_vehicule`.`est_supprime`, \n  `acl_vehicule`.`volumetrie`"
+"\nFROM `acl_vehicule`";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row25.idacl_vehicule = 0;
							} else {
		                          
            if(rs_tDBInput_13.getObject(1) != null) {
                row25.idacl_vehicule = rs_tDBInput_13.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row25.matricule = null;
							} else {
	                         		
        	row25.matricule = routines.system.JDBCUtil.getString(rs_tDBInput_13, 2, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row25.id_user = null;
							} else {
		                          
            if(rs_tDBInput_13.getObject(3) != null) {
                row25.id_user = rs_tDBInput_13.getLong(3);
            } else {
                    row25.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 4) {
								row25.date_creation = null;
							} else {
										
				if(rs_tDBInput_13.getString(4) != null) {
					String dateString_tDBInput_13 = rs_tDBInput_13.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_13) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_13)) {
						row25.date_creation = rs_tDBInput_13.getTimestamp(4);
					} else {
						row25.date_creation = (java.util.Date) year0_tDBInput_13.clone();
					}
				} else {
					row25.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_13 < 5) {
								row25.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_13.getString(5) != null) {
					String dateString_tDBInput_13 = rs_tDBInput_13.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_13) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_13)) {
						row25.date_last_modif = rs_tDBInput_13.getTimestamp(5);
					} else {
						row25.date_last_modif = (java.util.Date) year0_tDBInput_13.clone();
					}
				} else {
					row25.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_13 < 6) {
								row25.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_13.getObject(6) != null) {
                row25.est_supprime = rs_tDBInput_13.getLong(6);
            } else {
                    row25.est_supprime = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 7) {
								row25.volumetrie = null;
							} else {
		                          
            if(rs_tDBInput_13.getObject(7) != null) {
                row25.volumetrie = rs_tDBInput_13.getBigDecimal(7);
            } else {
                    row25.volumetrie = null;
            }
		                    }
					

 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_13 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

			//row25
			//row25


			
				if(execStat){
					runStat.updateStatOnConnection("row25"+iterateId,1, 1);
				} 
			

		

          row26 = null;
    Operator_tFilterRow_13 ope_tFilterRow_13 = new Operator_tFilterRow_13("||");
            ope_tFilterRow_13.matches((row25.est_supprime == null? false : row25.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_13.matches((row25.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_13.getMatchFlag()) {
              if(row26 == null){ 
                row26 = new row26Struct();
              }
               row26.idacl_vehicule = row25.idacl_vehicule;
               row26.matricule = row25.matricule;
               row26.id_user = row25.id_user;
               row26.date_creation = row25.date_creation;
               row26.date_last_modif = row25.date_last_modif;
               row26.est_supprime = row25.est_supprime;
               row26.volumetrie = row25.volumetrie;    
      nb_line_ok_tFilterRow_13++;
    } else {
      nb_line_reject_tFilterRow_13++;
    }

nb_line_tFilterRow_13++;

 


	tos_count_tFilterRow_13++;

/**
 * [tFilterRow_13 main ] stop
 */
	
	/**
	 * [tFilterRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 process_data_begin ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

			//row26
			//row26


			
				if(execStat){
					runStat.updateStatOnConnection("row26"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

BD_Vehicule = null;


// # Output table : 'BD_Vehicule'
BD_Vehicule_tmp.idacl_vehicule = row26.idacl_vehicule ;
BD_Vehicule_tmp.matricule = row26.matricule ;
BD_Vehicule_tmp.id_user = row26.id_user ;
BD_Vehicule_tmp.date_creation = row26.date_creation ;
BD_Vehicule_tmp.date_last_modif = row26.date_last_modif ;
BD_Vehicule_tmp.est_supprime = row26.est_supprime ;
BD_Vehicule_tmp.volumetrie = row26.volumetrie ;
BD_Vehicule = BD_Vehicule_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "BD_Vehicule"
if(BD_Vehicule != null) { 



	
	/**
	 * [tDBOutput_13 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

			//BD_Vehicule
			//BD_Vehicule


			
				if(execStat){
					runStat.updateStatOnConnection("BD_Vehicule"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_13 = false;


                    pstmt_tDBOutput_13.setLong(1, BD_Vehicule.idacl_vehicule);

            int checkCount_tDBOutput_13 = -1;
            try (java.sql.ResultSet rs_tDBOutput_13 = pstmt_tDBOutput_13.executeQuery()) {
                while(rs_tDBOutput_13.next()) {
                    checkCount_tDBOutput_13 = rs_tDBOutput_13.getInt(1);
                }
            }
            if(checkCount_tDBOutput_13 > 0) {
                        if(BD_Vehicule.matricule == null) {
pstmtUpdate_tDBOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_13.setString(1, BD_Vehicule.matricule);
}

                        if(BD_Vehicule.id_user == null) {
pstmtUpdate_tDBOutput_13.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_13.setLong(2, BD_Vehicule.id_user);
}

                        if(BD_Vehicule.date_creation != null) {
pstmtUpdate_tDBOutput_13.setTimestamp(3, new java.sql.Timestamp(BD_Vehicule.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_13.setNull(3, java.sql.Types.DATE);
}

                        if(BD_Vehicule.date_last_modif != null) {
pstmtUpdate_tDBOutput_13.setTimestamp(4, new java.sql.Timestamp(BD_Vehicule.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_13.setNull(4, java.sql.Types.DATE);
}

                        if(BD_Vehicule.est_supprime == null) {
pstmtUpdate_tDBOutput_13.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_13.setLong(5, BD_Vehicule.est_supprime);
}

                        pstmtUpdate_tDBOutput_13.setBigDecimal(6, BD_Vehicule.volumetrie);


	                    

                        pstmtUpdate_tDBOutput_13.setLong(7 + count_tDBOutput_13, BD_Vehicule.idacl_vehicule);

            try {
                    updatedCount_tDBOutput_13 = updatedCount_tDBOutput_13 + pstmtUpdate_tDBOutput_13.executeUpdate();
                    nb_line_tDBOutput_13++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_13 = true;
                    	nb_line_tDBOutput_13++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_13.setLong(1, BD_Vehicule.idacl_vehicule);

                        if(BD_Vehicule.matricule == null) {
pstmtInsert_tDBOutput_13.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_13.setString(2, BD_Vehicule.matricule);
}

                        if(BD_Vehicule.id_user == null) {
pstmtInsert_tDBOutput_13.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_13.setLong(3, BD_Vehicule.id_user);
}

                        if(BD_Vehicule.date_creation != null) {
pstmtInsert_tDBOutput_13.setTimestamp(4, new java.sql.Timestamp(BD_Vehicule.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_13.setNull(4, java.sql.Types.DATE);
}

                        if(BD_Vehicule.date_last_modif != null) {
pstmtInsert_tDBOutput_13.setTimestamp(5, new java.sql.Timestamp(BD_Vehicule.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_13.setNull(5, java.sql.Types.DATE);
}

                        if(BD_Vehicule.est_supprime == null) {
pstmtInsert_tDBOutput_13.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_13.setLong(6, BD_Vehicule.est_supprime);
}

                        pstmtInsert_tDBOutput_13.setBigDecimal(7, BD_Vehicule.volumetrie);

            try {
                    insertedCount_tDBOutput_13 = insertedCount_tDBOutput_13 + pstmtInsert_tDBOutput_13.executeUpdate();
                    nb_line_tDBOutput_13++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_13 = true;
                    	nb_line_tDBOutput_13++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_13{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_13) throws Exception {
                try {
						
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							if(countEach_tDBOutput_13 == -2 || countEach_tDBOutput_13 == -3) {
								break;
							}
							counter += countEach_tDBOutput_13;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_13 = 0;
					for(int countEach_tDBOutput_13: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_13) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							if(countEach_tDBOutput_13 == -2 || countEach_tDBOutput_13 == -3) {
								break;
							}
							counter += countEach_tDBOutput_13;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_13: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_13++;
                if(commitEvery_tDBOutput_13 <= commitCounter_tDBOutput_13) {
                	
                	conn_tDBOutput_13.commit();
            		
                	commitCounter_tDBOutput_13=0;
                }

 


	tos_count_tDBOutput_13++;

/**
 * [tDBOutput_13 main ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_end ] stop
 */

} // End of branch "BD_Vehicule"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tFilterRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
		if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
			
			conn_tDBInput_13.close();
			
		}
		
}

		   globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
		


 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tFilterRow_13 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	
    globalMap.put("tFilterRow_13_NB_LINE", nb_line_tFilterRow_13);
    globalMap.put("tFilterRow_13_NB_LINE_OK", nb_line_ok_tFilterRow_13);
    globalMap.put("tFilterRow_13_NB_LINE_REJECT", nb_line_reject_tFilterRow_13);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row25"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_13", true);
end_Hash.put("tFilterRow_13", System.currentTimeMillis());




/**
 * [tFilterRow_13 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row26"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_13 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



        if(pstmtUpdate_tDBOutput_13 != null){
            pstmtUpdate_tDBOutput_13.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_13");
        }
        if(pstmtInsert_tDBOutput_13 != null){
            pstmtInsert_tDBOutput_13.close();
            resourceMap.remove("pstmtInsert_tDBOutput_13");
        }
        if(pstmt_tDBOutput_13 != null) {
            pstmt_tDBOutput_13.close();
            resourceMap.remove("pstmt_tDBOutput_13");
        }
    resourceMap.put("statementClosed_tDBOutput_13", true);
            conn_tDBOutput_13.commit();
			
        conn_tDBOutput_13 .close();
        resourceMap.put("finish_tDBOutput_13", true);

	nb_line_deleted_tDBOutput_13=nb_line_deleted_tDBOutput_13+ deletedCount_tDBOutput_13;
	nb_line_update_tDBOutput_13=nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
	nb_line_inserted_tDBOutput_13=nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
	nb_line_rejected_tDBOutput_13=nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;
	
        globalMap.put("tDBOutput_13_NB_LINE",nb_line_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_UPDATED",nb_line_update_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_DELETED",nb_line_deleted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("BD_Vehicule"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_13", true);
end_Hash.put("tDBOutput_13", System.currentTimeMillis());




/**
 * [tDBOutput_13 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tFilterRow_13 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_13 = null;
                if ((pstmtUpdateToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_13")) != null) {
                    pstmtUpdateToClose_tDBOutput_13.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_13 = null;
                if ((pstmtInsertToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_13")) != null) {
                    pstmtInsertToClose_tDBOutput_13.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
                if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_13")) != null) {
                    pstmtToClose_tDBOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_13") == null){
            java.sql.Connection ctn_tDBOutput_13 = null;
            if((ctn_tDBOutput_13 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_13")) != null){
                try {
                    ctn_tDBOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_13) {
                    String errorMessage_tDBOutput_13 = "failed to close the connection in tDBOutput_13 :" + sqlEx_tDBOutput_13.getMessage();
                    System.err.println(errorMessage_tDBOutput_13);
                }
            }
        }
    }
 



/**
 * [tDBOutput_13 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class BD_PaysStruct implements routines.system.IPersistableRow<BD_PaysStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_pays;

				public long getIdacl_pays () {
					return this.idacl_pays;
				}
				
			    public String pays;

				public String getPays () {
					return this.pays;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_pays;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final BD_PaysStruct other = (BD_PaysStruct) obj;
		
						if (this.idacl_pays != other.idacl_pays)
							return false;
					

		return true;
    }

	public void copyDataTo(BD_PaysStruct other) {

		other.idacl_pays = this.idacl_pays;
	            other.pays = this.pays;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(BD_PaysStruct other) {

		other.idacl_pays = this.idacl_pays;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_pays = dis.readLong();
					
					this.pays = readString(dis);
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_pays);
					
					// String
				
						writeString(this.pays,dos);
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_pays="+String.valueOf(idacl_pays));
		sb.append(",pays="+pays);
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(BD_PaysStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_pays, other.idacl_pays);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];

	
			    public long idacl_pays;

				public long getIdacl_pays () {
					return this.idacl_pays;
				}
				
			    public String pays;

				public String getPays () {
					return this.pays;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_pays = dis.readLong();
					
					this.pays = readString(dis);
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_pays);
					
					// String
				
						writeString(this.pays,dos);
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_pays="+String.valueOf(idacl_pays));
		sb.append(",pays="+pays);
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_pays;

				public long getIdacl_pays () {
					return this.idacl_pays;
				}
				
			    public String pays;

				public String getPays () {
					return this.pays;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_pays;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.idacl_pays != other.idacl_pays)
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.idacl_pays = this.idacl_pays;
	            other.pays = this.pays;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.idacl_pays = this.idacl_pays;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_Job_DanisJIOGUE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_Job_DanisJIOGUE) {

        	try {

        		int length = 0;
		
			        this.idacl_pays = dis.readLong();
					
					this.pays = readString(dis);
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_pays);
					
					// String
				
						writeString(this.pays,dos);
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_pays="+String.valueOf(idacl_pays));
		sb.append(",pays="+pays);
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_pays, other.idacl_pays);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
row28Struct row28 = new row28Struct();
BD_PaysStruct BD_Pays = new BD_PaysStruct();






	
	/**
	 * [tDBOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_14", false);
		start_Hash.put("tDBOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("BD_Pays" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_14 = 0;
		



int nb_line_tDBOutput_14 = 0;
int nb_line_update_tDBOutput_14 = 0;
int nb_line_inserted_tDBOutput_14 = 0;
int nb_line_deleted_tDBOutput_14 = 0;
int nb_line_rejected_tDBOutput_14 = 0;

int deletedCount_tDBOutput_14=0;
int updatedCount_tDBOutput_14=0;
int insertedCount_tDBOutput_14=0;
int rejectedCount_tDBOutput_14=0;
String dbschema_tDBOutput_14 = null;
String tableName_tDBOutput_14 = null;
boolean whetherReject_tDBOutput_14 = false;

java.util.Calendar calendar_tDBOutput_14 = java.util.Calendar.getInstance();
long year1_tDBOutput_14 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_14 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_14 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_14;

java.util.Calendar calendar_datetimeoffset_tDBOutput_14 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_14 = 1;
        if(updateKeyCount_tDBOutput_14 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_14 = null;
String dbUser_tDBOutput_14 = null;
    dbschema_tDBOutput_14 = "";
    String driverClass_tDBOutput_14 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_14);
    String port_tDBOutput_14 = "1433";
    String dbname_tDBOutput_14 = "GestEntCom" ;
    String url_tDBOutput_14 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_14)) {
    	url_tDBOutput_14 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_14)) {
				url_tDBOutput_14 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_14 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_14 = "sa";

 
	final String decryptedPassword_tDBOutput_14 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_14 = decryptedPassword_tDBOutput_14;	
    conn_tDBOutput_14 = java.sql.DriverManager.getConnection(url_tDBOutput_14,dbUser_tDBOutput_14,dbPwd_tDBOutput_14);
	
		resourceMap.put("conn_tDBOutput_14", conn_tDBOutput_14);
	
        conn_tDBOutput_14.setAutoCommit(false);
        int commitEvery_tDBOutput_14 = 10000;
        int commitCounter_tDBOutput_14 = 0;


if(dbschema_tDBOutput_14 == null || dbschema_tDBOutput_14.trim().length() == 0) {
    tableName_tDBOutput_14 = "acl_pays";
} else {
    tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "].[" + "acl_pays";
}
	int count_tDBOutput_14=0;

                                boolean whetherExist_tDBOutput_14 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_14 = conn_tDBOutput_14.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_14.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_14 + "]" );
                                        whetherExist_tDBOutput_14 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_14 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_14) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_14 = conn_tDBOutput_14.createStatement()) {
                                        stmtCreate_tDBOutput_14.execute("CREATE TABLE [" + tableName_tDBOutput_14 + "]([idacl_pays] BIGINT  not null ,[pays] VARCHAR(45)  ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[id_user] BIGINT ,[est_supprime] BIGINT ,primary key([idacl_pays]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_14 + "] WHERE [idacl_pays] = ?");
        resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);
        String insert_tDBOutput_14 = "INSERT INTO [" + tableName_tDBOutput_14 + "] ([idacl_pays],[pays],[date_creation],[date_last_modif],[id_user],[est_supprime]) VALUES (?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(insert_tDBOutput_14);
        resourceMap.put("pstmtInsert_tDBOutput_14", pstmtInsert_tDBOutput_14);
        String update_tDBOutput_14 = "UPDATE [" + tableName_tDBOutput_14 + "] SET [pays] = ?,[date_creation] = ?,[date_last_modif] = ?,[id_user] = ?,[est_supprime] = ? WHERE [idacl_pays] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(update_tDBOutput_14);
        resourceMap.put("pstmtUpdate_tDBOutput_14", pstmtUpdate_tDBOutput_14);

 



/**
 * [tDBOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row28" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
BD_PaysStruct BD_Pays_tmp = new BD_PaysStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tFilterRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_14", false);
		start_Hash.put("tFilterRow_14", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row27" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_14 = 0;
		
    int nb_line_tFilterRow_14 = 0;
    int nb_line_ok_tFilterRow_14 = 0;
    int nb_line_reject_tFilterRow_14 = 0;

    class Operator_tFilterRow_14 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_14(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_14 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_14 = java.util.Calendar.getInstance();
		    calendar_tDBInput_14.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_14 = calendar_tDBInput_14.getTime();
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_14);
					String dbUser_tDBInput_14 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_14 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
				String url_tDBInput_14 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT \n  `acl_pays`.`idacl_pays`, \n  `acl_pays`.`pays`, \n  `acl_pays`.`date_creation`, \n  `acl_pays`.`date_last_modif`"
+", \n  `acl_pays`.`id_user`, \n  `acl_pays`.`est_supprime`\nFROM `acl_pays`";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row27.idacl_pays = 0;
							} else {
		                          
            if(rs_tDBInput_14.getObject(1) != null) {
                row27.idacl_pays = rs_tDBInput_14.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row27.pays = null;
							} else {
	                         		
        	row27.pays = routines.system.JDBCUtil.getString(rs_tDBInput_14, 2, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row27.date_creation = null;
							} else {
										
				if(rs_tDBInput_14.getString(3) != null) {
					String dateString_tDBInput_14 = rs_tDBInput_14.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_14) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_14)) {
						row27.date_creation = rs_tDBInput_14.getTimestamp(3);
					} else {
						row27.date_creation = (java.util.Date) year0_tDBInput_14.clone();
					}
				} else {
					row27.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_14 < 4) {
								row27.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_14.getString(4) != null) {
					String dateString_tDBInput_14 = rs_tDBInput_14.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_14) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_14)) {
						row27.date_last_modif = rs_tDBInput_14.getTimestamp(4);
					} else {
						row27.date_last_modif = (java.util.Date) year0_tDBInput_14.clone();
					}
				} else {
					row27.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_14 < 5) {
								row27.id_user = null;
							} else {
		                          
            if(rs_tDBInput_14.getObject(5) != null) {
                row27.id_user = rs_tDBInput_14.getLong(5);
            } else {
                    row27.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 6) {
								row27.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_14.getObject(6) != null) {
                row27.est_supprime = rs_tDBInput_14.getLong(6);
            } else {
                    row27.est_supprime = null;
            }
		                    }
					

 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_14 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

			//row27
			//row27


			
				if(execStat){
					runStat.updateStatOnConnection("row27"+iterateId,1, 1);
				} 
			

		

          row28 = null;
    Operator_tFilterRow_14 ope_tFilterRow_14 = new Operator_tFilterRow_14("||");
            ope_tFilterRow_14.matches((row27.est_supprime == null? false : row27.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_14.matches((row27.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_14.getMatchFlag()) {
              if(row28 == null){ 
                row28 = new row28Struct();
              }
               row28.idacl_pays = row27.idacl_pays;
               row28.pays = row27.pays;
               row28.date_creation = row27.date_creation;
               row28.date_last_modif = row27.date_last_modif;
               row28.id_user = row27.id_user;
               row28.est_supprime = row27.est_supprime;    
      nb_line_ok_tFilterRow_14++;
    } else {
      nb_line_reject_tFilterRow_14++;
    }

nb_line_tFilterRow_14++;

 


	tos_count_tFilterRow_14++;

/**
 * [tFilterRow_14 main ] stop
 */
	
	/**
	 * [tFilterRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

			//row28
			//row28


			
				if(execStat){
					runStat.updateStatOnConnection("row28"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

BD_Pays = null;


// # Output table : 'BD_Pays'
BD_Pays_tmp.idacl_pays = row28.idacl_pays ;
BD_Pays_tmp.pays = row28.pays ;
BD_Pays_tmp.date_creation = row28.date_creation ;
BD_Pays_tmp.date_last_modif = row28.date_last_modif ;
BD_Pays_tmp.id_user = row28.id_user ;
BD_Pays_tmp.est_supprime = row28.est_supprime ;
BD_Pays = BD_Pays_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "BD_Pays"
if(BD_Pays != null) { 



	
	/**
	 * [tDBOutput_14 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

			//BD_Pays
			//BD_Pays


			
				if(execStat){
					runStat.updateStatOnConnection("BD_Pays"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_14 = false;


                    pstmt_tDBOutput_14.setLong(1, BD_Pays.idacl_pays);

            int checkCount_tDBOutput_14 = -1;
            try (java.sql.ResultSet rs_tDBOutput_14 = pstmt_tDBOutput_14.executeQuery()) {
                while(rs_tDBOutput_14.next()) {
                    checkCount_tDBOutput_14 = rs_tDBOutput_14.getInt(1);
                }
            }
            if(checkCount_tDBOutput_14 > 0) {
                        if(BD_Pays.pays == null) {
pstmtUpdate_tDBOutput_14.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_14.setString(1, BD_Pays.pays);
}

                        if(BD_Pays.date_creation != null) {
pstmtUpdate_tDBOutput_14.setTimestamp(2, new java.sql.Timestamp(BD_Pays.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_14.setNull(2, java.sql.Types.DATE);
}

                        if(BD_Pays.date_last_modif != null) {
pstmtUpdate_tDBOutput_14.setTimestamp(3, new java.sql.Timestamp(BD_Pays.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_14.setNull(3, java.sql.Types.DATE);
}

                        if(BD_Pays.id_user == null) {
pstmtUpdate_tDBOutput_14.setNull(4, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_14.setLong(4, BD_Pays.id_user);
}

                        if(BD_Pays.est_supprime == null) {
pstmtUpdate_tDBOutput_14.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_14.setLong(5, BD_Pays.est_supprime);
}


	                    

                        pstmtUpdate_tDBOutput_14.setLong(6 + count_tDBOutput_14, BD_Pays.idacl_pays);

            try {
                    updatedCount_tDBOutput_14 = updatedCount_tDBOutput_14 + pstmtUpdate_tDBOutput_14.executeUpdate();
                    nb_line_tDBOutput_14++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_14 = true;
                    	nb_line_tDBOutput_14++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_14.setLong(1, BD_Pays.idacl_pays);

                        if(BD_Pays.pays == null) {
pstmtInsert_tDBOutput_14.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_14.setString(2, BD_Pays.pays);
}

                        if(BD_Pays.date_creation != null) {
pstmtInsert_tDBOutput_14.setTimestamp(3, new java.sql.Timestamp(BD_Pays.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_14.setNull(3, java.sql.Types.DATE);
}

                        if(BD_Pays.date_last_modif != null) {
pstmtInsert_tDBOutput_14.setTimestamp(4, new java.sql.Timestamp(BD_Pays.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_14.setNull(4, java.sql.Types.DATE);
}

                        if(BD_Pays.id_user == null) {
pstmtInsert_tDBOutput_14.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_14.setLong(5, BD_Pays.id_user);
}

                        if(BD_Pays.est_supprime == null) {
pstmtInsert_tDBOutput_14.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_14.setLong(6, BD_Pays.est_supprime);
}

            try {
                    insertedCount_tDBOutput_14 = insertedCount_tDBOutput_14 + pstmtInsert_tDBOutput_14.executeUpdate();
                    nb_line_tDBOutput_14++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_14 = true;
                    	nb_line_tDBOutput_14++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_14{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_14) throws Exception {
                try {
						
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							if(countEach_tDBOutput_14 == -2 || countEach_tDBOutput_14 == -3) {
								break;
							}
							counter += countEach_tDBOutput_14;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_14 = 0;
					for(int countEach_tDBOutput_14: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_14) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							if(countEach_tDBOutput_14 == -2 || countEach_tDBOutput_14 == -3) {
								break;
							}
							counter += countEach_tDBOutput_14;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_14: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_14++;
                if(commitEvery_tDBOutput_14 <= commitCounter_tDBOutput_14) {
                	
                	conn_tDBOutput_14.commit();
            		
                	commitCounter_tDBOutput_14=0;
                }

 


	tos_count_tDBOutput_14++;

/**
 * [tDBOutput_14 main ] stop
 */
	
	/**
	 * [tDBOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_end ] stop
 */

} // End of branch "BD_Pays"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tFilterRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
		if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
			
			conn_tDBInput_14.close();
			
		}
		
}

		   globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
		


 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tFilterRow_14 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	
    globalMap.put("tFilterRow_14_NB_LINE", nb_line_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_OK", nb_line_ok_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_REJECT", nb_line_reject_tFilterRow_14);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row27"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_14", true);
end_Hash.put("tFilterRow_14", System.currentTimeMillis());




/**
 * [tFilterRow_14 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row28"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_14 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



        if(pstmtUpdate_tDBOutput_14 != null){
            pstmtUpdate_tDBOutput_14.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_14");
        }
        if(pstmtInsert_tDBOutput_14 != null){
            pstmtInsert_tDBOutput_14.close();
            resourceMap.remove("pstmtInsert_tDBOutput_14");
        }
        if(pstmt_tDBOutput_14 != null) {
            pstmt_tDBOutput_14.close();
            resourceMap.remove("pstmt_tDBOutput_14");
        }
    resourceMap.put("statementClosed_tDBOutput_14", true);
            conn_tDBOutput_14.commit();
			
        conn_tDBOutput_14 .close();
        resourceMap.put("finish_tDBOutput_14", true);

	nb_line_deleted_tDBOutput_14=nb_line_deleted_tDBOutput_14+ deletedCount_tDBOutput_14;
	nb_line_update_tDBOutput_14=nb_line_update_tDBOutput_14 + updatedCount_tDBOutput_14;
	nb_line_inserted_tDBOutput_14=nb_line_inserted_tDBOutput_14 + insertedCount_tDBOutput_14;
	nb_line_rejected_tDBOutput_14=nb_line_rejected_tDBOutput_14 + rejectedCount_tDBOutput_14;
	
        globalMap.put("tDBOutput_14_NB_LINE",nb_line_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_UPDATED",nb_line_update_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_DELETED",nb_line_deleted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_14);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("BD_Pays"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_14", true);
end_Hash.put("tDBOutput_14", System.currentTimeMillis());




/**
 * [tDBOutput_14 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tFilterRow_14 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_14 = null;
                if ((pstmtUpdateToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_14")) != null) {
                    pstmtUpdateToClose_tDBOutput_14.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_14 = null;
                if ((pstmtInsertToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_14")) != null) {
                    pstmtInsertToClose_tDBOutput_14.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
                if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_14")) != null) {
                    pstmtToClose_tDBOutput_14.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_14") == null){
            java.sql.Connection ctn_tDBOutput_14 = null;
            if((ctn_tDBOutput_14 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_14")) != null){
                try {
                    ctn_tDBOutput_14.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_14) {
                    String errorMessage_tDBOutput_14 = "failed to close the connection in tDBOutput_14 :" + sqlEx_tDBOutput_14.getMessage();
                    System.err.println(errorMessage_tDBOutput_14);
                }
            }
        }
    }
 



/**
 * [tDBOutput_14 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Job_DanisJIOGUE Job_DanisJIOGUEClass = new Job_DanisJIOGUE();

        int exitCode = Job_DanisJIOGUEClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Job_DanisJIOGUE.class.getClassLoader().getResourceAsStream("tpdw_danisjiogue/job_danisjiogue_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Job_DanisJIOGUE.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_9) {
globalMap.put("tDBInput_9_SUBPROCESS_STATE", -1);

e_tDBInput_9.printStackTrace();

}
try {
errorCode = null;tDBInput_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_10) {
globalMap.put("tDBInput_10_SUBPROCESS_STATE", -1);

e_tDBInput_10.printStackTrace();

}
try {
errorCode = null;tDBInput_11Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_11) {
globalMap.put("tDBInput_11_SUBPROCESS_STATE", -1);

e_tDBInput_11.printStackTrace();

}
try {
errorCode = null;tDBInput_12Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_12) {
globalMap.put("tDBInput_12_SUBPROCESS_STATE", -1);

e_tDBInput_12.printStackTrace();

}
try {
errorCode = null;tDBInput_13Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_13) {
globalMap.put("tDBInput_13_SUBPROCESS_STATE", -1);

e_tDBInput_13.printStackTrace();

}
try {
errorCode = null;tDBInput_14Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_14) {
globalMap.put("tDBInput_14_SUBPROCESS_STATE", -1);

e_tDBInput_14.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job_DanisJIOGUE");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     351479 characters generated by Talend Open Studio for Data Integration 
 *     on the 23 mars 2020 10:01:13 GMT
 ************************************************************************************************/