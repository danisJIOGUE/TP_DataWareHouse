// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package tpdw_danisjiogue.job_table_dep1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: job_table_dep1 Purpose: <br>
 * Description: Permet de g√©rer les tables qui ont une Foreign Key <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class job_table_dep1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "job_table_dep1";
	private final String projectName = "TPDW_DANISJIOGUE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				job_table_dep1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(job_table_dep1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class DB_PersonnelStruct implements routines.system.IPersistableRow<DB_PersonnelStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_personnel;

				public long getIdacl_personnel () {
					return this.idacl_personnel;
				}
				
			    public long idacl_typepersonnel;

				public long getIdacl_typepersonnel () {
					return this.idacl_typepersonnel;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String num_cni;

				public String getNum_cni () {
					return this.num_cni;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_personnel;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DB_PersonnelStruct other = (DB_PersonnelStruct) obj;
		
						if (this.idacl_personnel != other.idacl_personnel)
							return false;
					

		return true;
    }

	public void copyDataTo(DB_PersonnelStruct other) {

		other.idacl_personnel = this.idacl_personnel;
	            other.idacl_typepersonnel = this.idacl_typepersonnel;
	            other.prenom = this.prenom;
	            other.nom = this.nom;
	            other.telephone = this.telephone;
	            other.num_cni = this.num_cni;
	            other.adresse = this.adresse;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(DB_PersonnelStruct other) {

		other.idacl_personnel = this.idacl_personnel;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1) {

        	try {

        		int length = 0;
		
			        this.idacl_personnel = dis.readLong();
					
			        this.idacl_typepersonnel = dis.readLong();
					
					this.prenom = readString(dis);
					
					this.nom = readString(dis);
					
					this.telephone = readString(dis);
					
					this.num_cni = readString(dis);
					
					this.adresse = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_personnel);
					
					// long
				
		            	dos.writeLong(this.idacl_typepersonnel);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.nom,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.num_cni,dos);
					
					// String
				
						writeString(this.adresse,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_personnel="+String.valueOf(idacl_personnel));
		sb.append(",idacl_typepersonnel="+String.valueOf(idacl_typepersonnel));
		sb.append(",prenom="+prenom);
		sb.append(",nom="+nom);
		sb.append(",telephone="+telephone);
		sb.append(",num_cni="+num_cni);
		sb.append(",adresse="+adresse);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DB_PersonnelStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_personnel, other.idacl_personnel);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];

	
			    public long idacl_personnel;

				public long getIdacl_personnel () {
					return this.idacl_personnel;
				}
				
			    public long idacl_typepersonnel;

				public long getIdacl_typepersonnel () {
					return this.idacl_typepersonnel;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String num_cni;

				public String getNum_cni () {
					return this.num_cni;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1) {

        	try {

        		int length = 0;
		
			        this.idacl_personnel = dis.readLong();
					
			        this.idacl_typepersonnel = dis.readLong();
					
					this.prenom = readString(dis);
					
					this.nom = readString(dis);
					
					this.telephone = readString(dis);
					
					this.num_cni = readString(dis);
					
					this.adresse = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_personnel);
					
					// long
				
		            	dos.writeLong(this.idacl_typepersonnel);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.nom,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.num_cni,dos);
					
					// String
				
						writeString(this.adresse,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_personnel="+String.valueOf(idacl_personnel));
		sb.append(",idacl_typepersonnel="+String.valueOf(idacl_typepersonnel));
		sb.append(",prenom="+prenom);
		sb.append(",nom="+nom);
		sb.append(",telephone="+telephone);
		sb.append(",num_cni="+num_cni);
		sb.append(",adresse="+adresse);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_personnel;

				public long getIdacl_personnel () {
					return this.idacl_personnel;
				}
				
			    public long idacl_typepersonnel;

				public long getIdacl_typepersonnel () {
					return this.idacl_typepersonnel;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String num_cni;

				public String getNum_cni () {
					return this.num_cni;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_personnel;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row29Struct other = (row29Struct) obj;
		
						if (this.idacl_personnel != other.idacl_personnel)
							return false;
					

		return true;
    }

	public void copyDataTo(row29Struct other) {

		other.idacl_personnel = this.idacl_personnel;
	            other.idacl_typepersonnel = this.idacl_typepersonnel;
	            other.prenom = this.prenom;
	            other.nom = this.nom;
	            other.telephone = this.telephone;
	            other.num_cni = this.num_cni;
	            other.adresse = this.adresse;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(row29Struct other) {

		other.idacl_personnel = this.idacl_personnel;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1) {

        	try {

        		int length = 0;
		
			        this.idacl_personnel = dis.readLong();
					
			        this.idacl_typepersonnel = dis.readLong();
					
					this.prenom = readString(dis);
					
					this.nom = readString(dis);
					
					this.telephone = readString(dis);
					
					this.num_cni = readString(dis);
					
					this.adresse = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_personnel);
					
					// long
				
		            	dos.writeLong(this.idacl_typepersonnel);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.nom,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.num_cni,dos);
					
					// String
				
						writeString(this.adresse,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_personnel="+String.valueOf(idacl_personnel));
		sb.append(",idacl_typepersonnel="+String.valueOf(idacl_typepersonnel));
		sb.append(",prenom="+prenom);
		sb.append(",nom="+nom);
		sb.append(",telephone="+telephone);
		sb.append(",num_cni="+num_cni);
		sb.append(",adresse="+adresse);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_personnel, other.idacl_personnel);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();
row30Struct row30 = new row30Struct();
DB_PersonnelStruct DB_Personnel = new DB_PersonnelStruct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DB_Personnel" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
    dbschema_tDBOutput_1 = "";
    String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_1);
    String port_tDBOutput_1 = "1433";
    String dbname_tDBOutput_1 = "GestEntCom" ;
    String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_1)) {
    	url_tDBOutput_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_1)) {
				url_tDBOutput_1 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_1 = "sa";

 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;	
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
		resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
	
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "acl_personnel";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "acl_personnel";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([idacl_personnel] BIGINT  not null ,[idacl_typepersonnel] BIGINT  not null ,[prenom] VARCHAR(50)  ,[nom] VARCHAR(30)  ,[telephone] VARCHAR(30)  ,[num_cni] VARCHAR(15)  ,[adresse] TEXT ,[id_user] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[est_supprime] BIGINT ,primary key([idacl_personnel]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [idacl_personnel] = ?");
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([idacl_personnel],[idacl_typepersonnel],[prenom],[nom],[telephone],[num_cni],[adresse],[id_user],[date_creation],[date_last_modif],[est_supprime]) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
        String update_tDBOutput_1 = "UPDATE [" + tableName_tDBOutput_1 + "] SET [idacl_typepersonnel] = ?,[prenom] = ?,[nom] = ?,[telephone] = ?,[num_cni] = ?,[adresse] = ?,[id_user] = ?,[date_creation] = ?,[date_last_modif] = ?,[est_supprime] = ? WHERE [idacl_personnel] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
        resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row30" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
DB_PersonnelStruct DB_Personnel_tmp = new DB_PersonnelStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row29" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `acl_personnel`.`idacl_personnel`, \n  `acl_personnel`.`idacl_typepersonnel`, \n  `acl_personnel`.`prenom`, \n  "
+"`acl_personnel`.`nom`, \n  `acl_personnel`.`telephone`, \n  `acl_personnel`.`num_cni`, \n  `acl_personnel`.`adresse`, \n  `a"
+"cl_personnel`.`id_user`, \n  `acl_personnel`.`date_creation`, \n  `acl_personnel`.`date_last_modif`, \n  `acl_personnel`.`e"
+"st_supprime`\nFROM `acl_personnel`";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row29.idacl_personnel = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                row29.idacl_personnel = rs_tDBInput_1.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row29.idacl_typepersonnel = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(2) != null) {
                row29.idacl_typepersonnel = rs_tDBInput_1.getLong(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row29.prenom = null;
							} else {
	                         		
        	row29.prenom = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row29.nom = null;
							} else {
	                         		
        	row29.nom = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row29.telephone = null;
							} else {
	                         		
        	row29.telephone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row29.num_cni = null;
							} else {
	                         		
        	row29.num_cni = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row29.adresse = null;
							} else {
	                         		
        	row29.adresse = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row29.id_user = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(8) != null) {
                row29.id_user = rs_tDBInput_1.getLong(8);
            } else {
                    row29.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row29.date_creation = null;
							} else {
										
				if(rs_tDBInput_1.getString(9) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(9);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row29.date_creation = rs_tDBInput_1.getTimestamp(9);
					} else {
						row29.date_creation = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row29.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row29.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_1.getString(10) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(10);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row29.date_last_modif = rs_tDBInput_1.getTimestamp(10);
					} else {
						row29.date_last_modif = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row29.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row29.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(11) != null) {
                row29.est_supprime = rs_tDBInput_1.getLong(11);
            } else {
                    row29.est_supprime = null;
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//row29
			//row29


			
				if(execStat){
					runStat.updateStatOnConnection("row29"+iterateId,1, 1);
				} 
			

		

          row30 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");
            ope_tFilterRow_1.matches((row29.est_supprime == null? false : row29.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_1.matches((row29.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row30 == null){ 
                row30 = new row30Struct();
              }
               row30.idacl_personnel = row29.idacl_personnel;
               row30.idacl_typepersonnel = row29.idacl_typepersonnel;
               row30.prenom = row29.prenom;
               row30.nom = row29.nom;
               row30.telephone = row29.telephone;
               row30.num_cni = row29.num_cni;
               row30.adresse = row29.adresse;
               row30.id_user = row29.id_user;
               row30.date_creation = row29.date_creation;
               row30.date_last_modif = row29.date_last_modif;
               row30.est_supprime = row29.est_supprime;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row30
			//row30


			
				if(execStat){
					runStat.updateStatOnConnection("row30"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

DB_Personnel = null;


// # Output table : 'DB_Personnel'
DB_Personnel_tmp.idacl_personnel = row30.idacl_personnel ;
DB_Personnel_tmp.idacl_typepersonnel = row30.idacl_typepersonnel ;
DB_Personnel_tmp.prenom = row30.prenom ;
DB_Personnel_tmp.nom = row30.nom ;
DB_Personnel_tmp.telephone = row30.telephone ;
DB_Personnel_tmp.num_cni = row30.num_cni ;
DB_Personnel_tmp.adresse = row30.adresse ;
DB_Personnel_tmp.id_user = row30.id_user ;
DB_Personnel_tmp.date_creation = row30.date_creation ;
DB_Personnel_tmp.date_last_modif = row30.date_last_modif ;
DB_Personnel_tmp.est_supprime = row30.est_supprime ;
DB_Personnel = DB_Personnel_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "DB_Personnel"
if(DB_Personnel != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//DB_Personnel
			//DB_Personnel


			
				if(execStat){
					runStat.updateStatOnConnection("DB_Personnel"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;


                    pstmt_tDBOutput_1.setLong(1, DB_Personnel.idacl_personnel);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        pstmtUpdate_tDBOutput_1.setLong(1, DB_Personnel.idacl_typepersonnel);

                        if(DB_Personnel.prenom == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, DB_Personnel.prenom);
}

                        if(DB_Personnel.nom == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, DB_Personnel.nom);
}

                        if(DB_Personnel.telephone == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, DB_Personnel.telephone);
}

                        if(DB_Personnel.num_cni == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, DB_Personnel.num_cni);
}

                        if(DB_Personnel.adresse == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, DB_Personnel.adresse);
}

                        if(DB_Personnel.id_user == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(7, DB_Personnel.id_user);
}

                        if(DB_Personnel.date_creation != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(DB_Personnel.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.DATE);
}

                        if(DB_Personnel.date_last_modif != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(9, new java.sql.Timestamp(DB_Personnel.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.DATE);
}

                        if(DB_Personnel.est_supprime == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(10, DB_Personnel.est_supprime);
}


	                    

                        pstmtUpdate_tDBOutput_1.setLong(11 + count_tDBOutput_1, DB_Personnel.idacl_personnel);

            try {
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setLong(1, DB_Personnel.idacl_personnel);

                        pstmtInsert_tDBOutput_1.setLong(2, DB_Personnel.idacl_typepersonnel);

                        if(DB_Personnel.prenom == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, DB_Personnel.prenom);
}

                        if(DB_Personnel.nom == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, DB_Personnel.nom);
}

                        if(DB_Personnel.telephone == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, DB_Personnel.telephone);
}

                        if(DB_Personnel.num_cni == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, DB_Personnel.num_cni);
}

                        if(DB_Personnel.adresse == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, DB_Personnel.adresse);
}

                        if(DB_Personnel.id_user == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(8, DB_Personnel.id_user);
}

                        if(DB_Personnel.date_creation != null) {
pstmtInsert_tDBOutput_1.setTimestamp(9, new java.sql.Timestamp(DB_Personnel.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.DATE);
}

                        if(DB_Personnel.date_last_modif != null) {
pstmtInsert_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(DB_Personnel.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.DATE);
}

                        if(DB_Personnel.est_supprime == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(11, DB_Personnel.est_supprime);
}

            try {
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	
                	conn_tDBOutput_1.commit();
            		
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "DB_Personnel"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row29"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row30"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
            conn_tDBOutput_1.commit();
			
        conn_tDBOutput_1 .close();
        resourceMap.put("finish_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DB_Personnel"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class DB_ClientStruct implements routines.system.IPersistableRow<DB_ClientStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public long idacl_monnaie;

				public long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public long idacl_pays;

				public long getIdacl_pays () {
					return this.idacl_pays;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_client;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DB_ClientStruct other = (DB_ClientStruct) obj;
		
						if (this.idacl_client != other.idacl_client)
							return false;
					

		return true;
    }

	public void copyDataTo(DB_ClientStruct other) {

		other.idacl_client = this.idacl_client;
	            other.idacl_monnaie = this.idacl_monnaie;
	            other.idacl_pays = this.idacl_pays;
	            other.prenom = this.prenom;
	            other.nom = this.nom;
	            other.telephone = this.telephone;
	            other.adresse = this.adresse;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(DB_ClientStruct other) {

		other.idacl_client = this.idacl_client;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1) {

        	try {

        		int length = 0;
		
			        this.idacl_client = dis.readLong();
					
			        this.idacl_monnaie = dis.readLong();
					
			        this.idacl_pays = dis.readLong();
					
					this.prenom = readString(dis);
					
					this.nom = readString(dis);
					
					this.telephone = readString(dis);
					
					this.adresse = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// long
				
		            	dos.writeLong(this.idacl_monnaie);
					
					// long
				
		            	dos.writeLong(this.idacl_pays);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.nom,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.adresse,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_client="+String.valueOf(idacl_client));
		sb.append(",idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",idacl_pays="+String.valueOf(idacl_pays));
		sb.append(",prenom="+prenom);
		sb.append(",nom="+nom);
		sb.append(",telephone="+telephone);
		sb.append(",adresse="+adresse);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DB_ClientStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_client, other.idacl_client);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];

	
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public long idacl_monnaie;

				public long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public long idacl_pays;

				public long getIdacl_pays () {
					return this.idacl_pays;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1) {

        	try {

        		int length = 0;
		
			        this.idacl_client = dis.readLong();
					
			        this.idacl_monnaie = dis.readLong();
					
			        this.idacl_pays = dis.readLong();
					
					this.prenom = readString(dis);
					
					this.nom = readString(dis);
					
					this.telephone = readString(dis);
					
					this.adresse = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// long
				
		            	dos.writeLong(this.idacl_monnaie);
					
					// long
				
		            	dos.writeLong(this.idacl_pays);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.nom,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.adresse,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_client="+String.valueOf(idacl_client));
		sb.append(",idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",idacl_pays="+String.valueOf(idacl_pays));
		sb.append(",prenom="+prenom);
		sb.append(",nom="+nom);
		sb.append(",telephone="+telephone);
		sb.append(",adresse="+adresse);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public long idacl_monnaie;

				public long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public long idacl_pays;

				public long getIdacl_pays () {
					return this.idacl_pays;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_client;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.idacl_client != other.idacl_client)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.idacl_client = this.idacl_client;
	            other.idacl_monnaie = this.idacl_monnaie;
	            other.idacl_pays = this.idacl_pays;
	            other.prenom = this.prenom;
	            other.nom = this.nom;
	            other.telephone = this.telephone;
	            other.adresse = this.adresse;
	            other.id_user = this.id_user;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.est_supprime = this.est_supprime;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.idacl_client = this.idacl_client;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep1.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep1) {

        	try {

        		int length = 0;
		
			        this.idacl_client = dis.readLong();
					
			        this.idacl_monnaie = dis.readLong();
					
			        this.idacl_pays = dis.readLong();
					
					this.prenom = readString(dis);
					
					this.nom = readString(dis);
					
					this.telephone = readString(dis);
					
					this.adresse = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// long
				
		            	dos.writeLong(this.idacl_monnaie);
					
					// long
				
		            	dos.writeLong(this.idacl_pays);
					
					// String
				
						writeString(this.prenom,dos);
					
					// String
				
						writeString(this.nom,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.adresse,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_client="+String.valueOf(idacl_client));
		sb.append(",idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",idacl_pays="+String.valueOf(idacl_pays));
		sb.append(",prenom="+prenom);
		sb.append(",nom="+nom);
		sb.append(",telephone="+telephone);
		sb.append(",adresse="+adresse);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_client, other.idacl_client);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
DB_ClientStruct DB_Client = new DB_ClientStruct();






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DB_Client" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		



int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;
String dbschema_tDBOutput_2 = null;
String tableName_tDBOutput_2 = null;
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_2;

java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;
    dbschema_tDBOutput_2 = "";
    String driverClass_tDBOutput_2 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_2);
    String port_tDBOutput_2 = "1433";
    String dbname_tDBOutput_2 = "GestEntCom" ;
    String url_tDBOutput_2 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_2)) {
    	url_tDBOutput_2 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_2)) {
				url_tDBOutput_2 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_2 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_2 = "sa";

 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;	
    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
		resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
	
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
    tableName_tDBOutput_2 = "acl_client";
} else {
    tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "acl_client";
}
	int count_tDBOutput_2=0;

                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_2.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_2 + "]" );
                                        whetherExist_tDBOutput_2 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_2 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE [" + tableName_tDBOutput_2 + "]([idacl_client] BIGINT  not null ,[idacl_pays] BIGINT  not null ,[prenom] VARCHAR(50)  ,[nom] VARCHAR(30)  ,[telephone] VARCHAR(30)  ,[adresse] TEXT ,[id_user] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[est_supprime] BIGINT ,primary key([idacl_client]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_2 + "] WHERE [idacl_client] = ?");
        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
        String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2 + "] ([idacl_client],[idacl_pays],[prenom],[nom],[telephone],[adresse],[id_user],[date_creation],[date_last_modif],[est_supprime]) VALUES (?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
        resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
        String update_tDBOutput_2 = "UPDATE [" + tableName_tDBOutput_2 + "] SET [idacl_pays] = ?,[prenom] = ?,[nom] = ?,[telephone] = ?,[adresse] = ?,[id_user] = ?,[date_creation] = ?,[date_last_modif] = ?,[est_supprime] = ? WHERE [idacl_client] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
        resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
DB_ClientStruct DB_Client_tmp = new DB_ClientStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  `acl_client`.`idacl_client`, \n  `acl_client`.`idacl_monnaie`, \n  `acl_client`.`idacl_pays`, \n  `acl_client`.`"
+"prenom`, \n  `acl_client`.`nom`, \n  `acl_client`.`telephone`, \n  `acl_client`.`adresse`, \n  `acl_client`.`id_user`, \n  `a"
+"cl_client`.`date_creation`, \n  `acl_client`.`date_last_modif`, \n  `acl_client`.`est_supprime`\nFROM `acl_client`";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.idacl_client = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(1) != null) {
                row1.idacl_client = rs_tDBInput_2.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.idacl_monnaie = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(2) != null) {
                row1.idacl_monnaie = rs_tDBInput_2.getLong(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.idacl_pays = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(3) != null) {
                row1.idacl_pays = rs_tDBInput_2.getLong(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.prenom = null;
							} else {
	                         		
        	row1.prenom = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.nom = null;
							} else {
	                         		
        	row1.nom = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row1.telephone = null;
							} else {
	                         		
        	row1.telephone = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row1.adresse = null;
							} else {
	                         		
        	row1.adresse = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row1.id_user = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(8) != null) {
                row1.id_user = rs_tDBInput_2.getLong(8);
            } else {
                    row1.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row1.date_creation = null;
							} else {
										
				if(rs_tDBInput_2.getString(9) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(9);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row1.date_creation = rs_tDBInput_2.getTimestamp(9);
					} else {
						row1.date_creation = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row1.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row1.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_2.getString(10) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(10);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row1.date_last_modif = rs_tDBInput_2.getTimestamp(10);
					} else {
						row1.date_last_modif = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row1.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row1.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(11) != null) {
                row1.est_supprime = rs_tDBInput_2.getLong(11);
            } else {
                    row1.est_supprime = null;
            }
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

          row2 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("||");
            ope_tFilterRow_2.matches((row1.est_supprime == null? false : row1.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_2.matches((row1.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row2 == null){ 
                row2 = new row2Struct();
              }
               row2.idacl_client = row1.idacl_client;
               row2.idacl_monnaie = row1.idacl_monnaie;
               row2.idacl_pays = row1.idacl_pays;
               row2.prenom = row1.prenom;
               row2.nom = row1.nom;
               row2.telephone = row1.telephone;
               row2.adresse = row1.adresse;
               row2.id_user = row1.id_user;
               row2.date_creation = row1.date_creation;
               row2.date_last_modif = row1.date_last_modif;
               row2.est_supprime = row1.est_supprime;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

DB_Client = null;


// # Output table : 'DB_Client'
DB_Client_tmp.idacl_client = row2.idacl_client ;
DB_Client_tmp.idacl_monnaie = row2.idacl_monnaie ;
DB_Client_tmp.idacl_pays = row2.idacl_pays ;
DB_Client_tmp.prenom = row2.prenom ;
DB_Client_tmp.nom = row2.nom ;
DB_Client_tmp.telephone = row2.telephone ;
DB_Client_tmp.adresse = row2.adresse ;
DB_Client_tmp.id_user = row2.id_user ;
DB_Client_tmp.date_creation = row2.date_creation ;
DB_Client_tmp.date_last_modif = row2.date_last_modif ;
DB_Client_tmp.est_supprime = row2.est_supprime ;
DB_Client = DB_Client_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "DB_Client"
if(DB_Client != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//DB_Client
			//DB_Client


			
				if(execStat){
					runStat.updateStatOnConnection("DB_Client"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;


                    pstmt_tDBOutput_2.setLong(1, DB_Client.idacl_client);

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        pstmtUpdate_tDBOutput_2.setLong(1, DB_Client.idacl_pays);

                        if(DB_Client.prenom == null) {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(2, DB_Client.prenom);
}

                        if(DB_Client.nom == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, DB_Client.nom);
}

                        if(DB_Client.telephone == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4, DB_Client.telephone);
}

                        if(DB_Client.adresse == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(5, DB_Client.adresse);
}

                        if(DB_Client.id_user == null) {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(6, DB_Client.id_user);
}

                        if(DB_Client.date_creation != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(7, new java.sql.Timestamp(DB_Client.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.DATE);
}

                        if(DB_Client.date_last_modif != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(8, new java.sql.Timestamp(DB_Client.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.DATE);
}

                        if(DB_Client.est_supprime == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(9, DB_Client.est_supprime);
}


	                    

                        pstmtUpdate_tDBOutput_2.setLong(10 + count_tDBOutput_2, DB_Client.idacl_client);

            try {
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_2 = true;
                    	nb_line_tDBOutput_2++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_2.setLong(1, DB_Client.idacl_client);

                        pstmtInsert_tDBOutput_2.setLong(2, DB_Client.idacl_pays);

                        if(DB_Client.prenom == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, DB_Client.prenom);
}

                        if(DB_Client.nom == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, DB_Client.nom);
}

                        if(DB_Client.telephone == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, DB_Client.telephone);
}

                        if(DB_Client.adresse == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(6, DB_Client.adresse);
}

                        if(DB_Client.id_user == null) {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(7, DB_Client.id_user);
}

                        if(DB_Client.date_creation != null) {
pstmtInsert_tDBOutput_2.setTimestamp(8, new java.sql.Timestamp(DB_Client.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.DATE);
}

                        if(DB_Client.date_last_modif != null) {
pstmtInsert_tDBOutput_2.setTimestamp(9, new java.sql.Timestamp(DB_Client.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.DATE);
}

                        if(DB_Client.est_supprime == null) {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(10, DB_Client.est_supprime);
}

            try {
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_2 = true;
                    	nb_line_tDBOutput_2++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_2{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
						
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	
                	conn_tDBOutput_2.commit();
            		
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "DB_Client"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
            conn_tDBOutput_2.commit();
			
        conn_tDBOutput_2 .close();
        resourceMap.put("finish_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DB_Client"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final job_table_dep1 job_table_dep1Class = new job_table_dep1();

        int exitCode = job_table_dep1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = job_table_dep1.class.getClassLoader().getResourceAsStream("tpdw_danisjiogue/job_table_dep1_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = job_table_dep1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}
try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : job_table_dep1");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     144016 characters generated by Talend Open Studio for Data Integration 
 *     on the 23 mars 2020 10:01:13 GMT
 ************************************************************************************************/