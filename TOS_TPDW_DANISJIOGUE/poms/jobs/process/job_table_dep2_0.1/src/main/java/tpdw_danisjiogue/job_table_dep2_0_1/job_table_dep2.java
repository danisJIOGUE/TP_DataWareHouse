// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package tpdw_danisjiogue.job_table_dep2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: job_table_dep2 Purpose: <br>
 * Description: Doit s'éxécuter après le chargement de la table client <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class job_table_dep2 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "job_table_dep2";
	private final String projectName = "TPDW_DANISJIOGUE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				job_table_dep2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(job_table_dep2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class commandesStruct implements routines.system.IPersistableRow<commandesStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_livraison;

				public long getIdacl_livraison () {
					return this.idacl_livraison;
				}
				
			    public long idacl_typec;

				public long getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public long idacl_monnaie;

				public long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public long idacl_personnel;

				public long getIdacl_personnel () {
					return this.idacl_personnel;
				}
				
			    public long idacl_vehicule;

				public long getIdacl_vehicule () {
					return this.idacl_vehicule;
				}
				
			    public BigDecimal volume;

				public BigDecimal getVolume () {
					return this.volume;
				}
				
			    public Long nbr_camions;

				public Long getNbr_camions () {
					return this.nbr_camions;
				}
				
			    public BigDecimal prix_m3;

				public BigDecimal getPrix_m3 () {
					return this.prix_m3;
				}
				
			    public BigDecimal quantite;

				public BigDecimal getQuantite () {
					return this.quantite;
				}
				
			    public String destination;

				public String getDestination () {
					return this.destination;
				}
				
			    public String num_livraison;

				public String getNum_livraison () {
					return this.num_livraison;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				
			    public String date_livrai;

				public String getDate_livrai () {
					return this.date_livrai;
				}
				
			    public String accuse_commande;

				public String getAccuse_commande () {
					return this.accuse_commande;
				}
				
			    public Integer num_liv_jour;

				public Integer getNum_liv_jour () {
					return this.num_liv_jour;
				}
				
			    public Float tot_liv_prix_cfa;

				public Float getTot_liv_prix_cfa () {
					return this.tot_liv_prix_cfa;
				}
				
			    public Float tot_liv_prix_dalaxy;

				public Float getTot_liv_prix_dalaxy () {
					return this.tot_liv_prix_dalaxy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_livraison;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final commandesStruct other = (commandesStruct) obj;
		
						if (this.idacl_livraison != other.idacl_livraison)
							return false;
					

		return true;
    }

	public void copyDataTo(commandesStruct other) {

		other.idacl_livraison = this.idacl_livraison;
	            other.idacl_typec = this.idacl_typec;
	            other.idacl_client = this.idacl_client;
	            other.idacl_monnaie = this.idacl_monnaie;
	            other.idacl_personnel = this.idacl_personnel;
	            other.idacl_vehicule = this.idacl_vehicule;
	            other.volume = this.volume;
	            other.nbr_camions = this.nbr_camions;
	            other.prix_m3 = this.prix_m3;
	            other.quantite = this.quantite;
	            other.destination = this.destination;
	            other.num_livraison = this.num_livraison;
	            other.id_conversion = this.id_conversion;
	            other.taux_1 = this.taux_1;
	            other.taux_2 = this.taux_2;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.validation = this.validation;
	            other.id_user_validation = this.id_user_validation;
	            other.date_livrai = this.date_livrai;
	            other.accuse_commande = this.accuse_commande;
	            other.num_liv_jour = this.num_liv_jour;
	            other.tot_liv_prix_cfa = this.tot_liv_prix_cfa;
	            other.tot_liv_prix_dalaxy = this.tot_liv_prix_dalaxy;
	            
	}

	public void copyKeysDataTo(commandesStruct other) {

		other.idacl_livraison = this.idacl_livraison;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_livraison = dis.readLong();
					
			        this.idacl_typec = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
			        this.idacl_monnaie = dis.readLong();
					
			        this.idacl_personnel = dis.readLong();
					
			        this.idacl_vehicule = dis.readLong();
					
						this.volume = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nbr_camions = null;
           				} else {
           			    	this.nbr_camions = dis.readLong();
           				}
					
						this.prix_m3 = (BigDecimal) dis.readObject();
					
						this.quantite = (BigDecimal) dis.readObject();
					
					this.destination = readString(dis);
					
					this.num_livraison = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
					this.date_livrai = readString(dis);
					
					this.accuse_commande = readString(dis);
					
						this.num_liv_jour = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tot_liv_prix_cfa = null;
           				} else {
           			    	this.tot_liv_prix_cfa = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tot_liv_prix_dalaxy = null;
           				} else {
           			    	this.tot_liv_prix_dalaxy = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_livraison);
					
					// long
				
		            	dos.writeLong(this.idacl_typec);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// long
				
		            	dos.writeLong(this.idacl_monnaie);
					
					// long
				
		            	dos.writeLong(this.idacl_personnel);
					
					// long
				
		            	dos.writeLong(this.idacl_vehicule);
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume);
					
					// Long
				
						if(this.nbr_camions == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nbr_camions);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_m3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.quantite);
					
					// String
				
						writeString(this.destination,dos);
					
					// String
				
						writeString(this.num_livraison,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
					// String
				
						writeString(this.date_livrai,dos);
					
					// String
				
						writeString(this.accuse_commande,dos);
					
					// Integer
				
						writeInteger(this.num_liv_jour,dos);
					
					// Float
				
						if(this.tot_liv_prix_cfa == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tot_liv_prix_cfa);
		            	}
					
					// Float
				
						if(this.tot_liv_prix_dalaxy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tot_liv_prix_dalaxy);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_livraison="+String.valueOf(idacl_livraison));
		sb.append(",idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",idacl_personnel="+String.valueOf(idacl_personnel));
		sb.append(",idacl_vehicule="+String.valueOf(idacl_vehicule));
		sb.append(",volume="+String.valueOf(volume));
		sb.append(",nbr_camions="+String.valueOf(nbr_camions));
		sb.append(",prix_m3="+String.valueOf(prix_m3));
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",destination="+destination);
		sb.append(",num_livraison="+num_livraison);
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
		sb.append(",date_livrai="+date_livrai);
		sb.append(",accuse_commande="+accuse_commande);
		sb.append(",num_liv_jour="+String.valueOf(num_liv_jour));
		sb.append(",tot_liv_prix_cfa="+String.valueOf(tot_liv_prix_cfa));
		sb.append(",tot_liv_prix_dalaxy="+String.valueOf(tot_liv_prix_dalaxy));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(commandesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_livraison, other.idacl_livraison);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];

	
			    public long idacl_livraison;

				public long getIdacl_livraison () {
					return this.idacl_livraison;
				}
				
			    public long idacl_personnel;

				public long getIdacl_personnel () {
					return this.idacl_personnel;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public long idacl_vehicule;

				public long getIdacl_vehicule () {
					return this.idacl_vehicule;
				}
				
			    public long idacl_typec;

				public long getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public BigDecimal volume;

				public BigDecimal getVolume () {
					return this.volume;
				}
				
			    public Long nbr_camions;

				public Long getNbr_camions () {
					return this.nbr_camions;
				}
				
			    public BigDecimal prix_m3;

				public BigDecimal getPrix_m3 () {
					return this.prix_m3;
				}
				
			    public BigDecimal quantite;

				public BigDecimal getQuantite () {
					return this.quantite;
				}
				
			    public String destination;

				public String getDestination () {
					return this.destination;
				}
				
			    public String num_livraison;

				public String getNum_livraison () {
					return this.num_livraison;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				
			    public Long idacl_monnaie;

				public Long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public String date_livrai;

				public String getDate_livrai () {
					return this.date_livrai;
				}
				
			    public String accuse_commande;

				public String getAccuse_commande () {
					return this.accuse_commande;
				}
				
			    public Integer num_liv_jour;

				public Integer getNum_liv_jour () {
					return this.num_liv_jour;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_livraison = dis.readLong();
					
			        this.idacl_personnel = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
			        this.idacl_vehicule = dis.readLong();
					
			        this.idacl_typec = dis.readLong();
					
						this.volume = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nbr_camions = null;
           				} else {
           			    	this.nbr_camions = dis.readLong();
           				}
					
						this.prix_m3 = (BigDecimal) dis.readObject();
					
						this.quantite = (BigDecimal) dis.readObject();
					
					this.destination = readString(dis);
					
					this.num_livraison = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idacl_monnaie = null;
           				} else {
           			    	this.idacl_monnaie = dis.readLong();
           				}
					
					this.date_livrai = readString(dis);
					
					this.accuse_commande = readString(dis);
					
						this.num_liv_jour = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_livraison);
					
					// long
				
		            	dos.writeLong(this.idacl_personnel);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// long
				
		            	dos.writeLong(this.idacl_vehicule);
					
					// long
				
		            	dos.writeLong(this.idacl_typec);
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume);
					
					// Long
				
						if(this.nbr_camions == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nbr_camions);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_m3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.quantite);
					
					// String
				
						writeString(this.destination,dos);
					
					// String
				
						writeString(this.num_livraison,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
					// Long
				
						if(this.idacl_monnaie == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idacl_monnaie);
		            	}
					
					// String
				
						writeString(this.date_livrai,dos);
					
					// String
				
						writeString(this.accuse_commande,dos);
					
					// Integer
				
						writeInteger(this.num_liv_jour,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_livraison="+String.valueOf(idacl_livraison));
		sb.append(",idacl_personnel="+String.valueOf(idacl_personnel));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",idacl_vehicule="+String.valueOf(idacl_vehicule));
		sb.append(",idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",volume="+String.valueOf(volume));
		sb.append(",nbr_camions="+String.valueOf(nbr_camions));
		sb.append(",prix_m3="+String.valueOf(prix_m3));
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",destination="+destination);
		sb.append(",num_livraison="+num_livraison);
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
		sb.append(",idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",date_livrai="+date_livrai);
		sb.append(",accuse_commande="+accuse_commande);
		sb.append(",num_liv_jour="+String.valueOf(num_liv_jour));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_livraison;

				public long getIdacl_livraison () {
					return this.idacl_livraison;
				}
				
			    public long idacl_personnel;

				public long getIdacl_personnel () {
					return this.idacl_personnel;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public long idacl_vehicule;

				public long getIdacl_vehicule () {
					return this.idacl_vehicule;
				}
				
			    public long idacl_typec;

				public long getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public BigDecimal volume;

				public BigDecimal getVolume () {
					return this.volume;
				}
				
			    public Long nbr_camions;

				public Long getNbr_camions () {
					return this.nbr_camions;
				}
				
			    public BigDecimal prix_m3;

				public BigDecimal getPrix_m3 () {
					return this.prix_m3;
				}
				
			    public BigDecimal quantite;

				public BigDecimal getQuantite () {
					return this.quantite;
				}
				
			    public String destination;

				public String getDestination () {
					return this.destination;
				}
				
			    public String num_livraison;

				public String getNum_livraison () {
					return this.num_livraison;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				
			    public Long idacl_monnaie;

				public Long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public String date_livrai;

				public String getDate_livrai () {
					return this.date_livrai;
				}
				
			    public String accuse_commande;

				public String getAccuse_commande () {
					return this.accuse_commande;
				}
				
			    public Integer num_liv_jour;

				public Integer getNum_liv_jour () {
					return this.num_liv_jour;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_livraison;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.idacl_livraison != other.idacl_livraison)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.idacl_livraison = this.idacl_livraison;
	            other.idacl_personnel = this.idacl_personnel;
	            other.idacl_client = this.idacl_client;
	            other.idacl_vehicule = this.idacl_vehicule;
	            other.idacl_typec = this.idacl_typec;
	            other.volume = this.volume;
	            other.nbr_camions = this.nbr_camions;
	            other.prix_m3 = this.prix_m3;
	            other.quantite = this.quantite;
	            other.destination = this.destination;
	            other.num_livraison = this.num_livraison;
	            other.id_conversion = this.id_conversion;
	            other.taux_1 = this.taux_1;
	            other.taux_2 = this.taux_2;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.validation = this.validation;
	            other.id_user_validation = this.id_user_validation;
	            other.idacl_monnaie = this.idacl_monnaie;
	            other.date_livrai = this.date_livrai;
	            other.accuse_commande = this.accuse_commande;
	            other.num_liv_jour = this.num_liv_jour;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.idacl_livraison = this.idacl_livraison;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_livraison = dis.readLong();
					
			        this.idacl_personnel = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
			        this.idacl_vehicule = dis.readLong();
					
			        this.idacl_typec = dis.readLong();
					
						this.volume = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nbr_camions = null;
           				} else {
           			    	this.nbr_camions = dis.readLong();
           				}
					
						this.prix_m3 = (BigDecimal) dis.readObject();
					
						this.quantite = (BigDecimal) dis.readObject();
					
					this.destination = readString(dis);
					
					this.num_livraison = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idacl_monnaie = null;
           				} else {
           			    	this.idacl_monnaie = dis.readLong();
           				}
					
					this.date_livrai = readString(dis);
					
					this.accuse_commande = readString(dis);
					
						this.num_liv_jour = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_livraison);
					
					// long
				
		            	dos.writeLong(this.idacl_personnel);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// long
				
		            	dos.writeLong(this.idacl_vehicule);
					
					// long
				
		            	dos.writeLong(this.idacl_typec);
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume);
					
					// Long
				
						if(this.nbr_camions == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nbr_camions);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_m3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.quantite);
					
					// String
				
						writeString(this.destination,dos);
					
					// String
				
						writeString(this.num_livraison,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
					// Long
				
						if(this.idacl_monnaie == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idacl_monnaie);
		            	}
					
					// String
				
						writeString(this.date_livrai,dos);
					
					// String
				
						writeString(this.accuse_commande,dos);
					
					// Integer
				
						writeInteger(this.num_liv_jour,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_livraison="+String.valueOf(idacl_livraison));
		sb.append(",idacl_personnel="+String.valueOf(idacl_personnel));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",idacl_vehicule="+String.valueOf(idacl_vehicule));
		sb.append(",idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",volume="+String.valueOf(volume));
		sb.append(",nbr_camions="+String.valueOf(nbr_camions));
		sb.append(",prix_m3="+String.valueOf(prix_m3));
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",destination="+destination);
		sb.append(",num_livraison="+num_livraison);
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
		sb.append(",idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",date_livrai="+date_livrai);
		sb.append(",accuse_commande="+accuse_commande);
		sb.append(",num_liv_jour="+String.valueOf(num_liv_jour));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_livraison, other.idacl_livraison);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_livraison;

				public long getIdacl_livraison () {
					return this.idacl_livraison;
				}
				
			    public long idacl_personnel;

				public long getIdacl_personnel () {
					return this.idacl_personnel;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public long idacl_vehicule;

				public long getIdacl_vehicule () {
					return this.idacl_vehicule;
				}
				
			    public long idacl_typec;

				public long getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public BigDecimal volume;

				public BigDecimal getVolume () {
					return this.volume;
				}
				
			    public Long nbr_camions;

				public Long getNbr_camions () {
					return this.nbr_camions;
				}
				
			    public BigDecimal prix_m3;

				public BigDecimal getPrix_m3 () {
					return this.prix_m3;
				}
				
			    public BigDecimal quantite;

				public BigDecimal getQuantite () {
					return this.quantite;
				}
				
			    public String destination;

				public String getDestination () {
					return this.destination;
				}
				
			    public String num_livraison;

				public String getNum_livraison () {
					return this.num_livraison;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				
			    public Long idacl_monnaie;

				public Long getIdacl_monnaie () {
					return this.idacl_monnaie;
				}
				
			    public String date_livrai;

				public String getDate_livrai () {
					return this.date_livrai;
				}
				
			    public String accuse_commande;

				public String getAccuse_commande () {
					return this.accuse_commande;
				}
				
			    public Integer num_liv_jour;

				public Integer getNum_liv_jour () {
					return this.num_liv_jour;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_livraison;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_2Struct other = (after_tDBInput_2Struct) obj;
		
						if (this.idacl_livraison != other.idacl_livraison)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_2Struct other) {

		other.idacl_livraison = this.idacl_livraison;
	            other.idacl_personnel = this.idacl_personnel;
	            other.idacl_client = this.idacl_client;
	            other.idacl_vehicule = this.idacl_vehicule;
	            other.idacl_typec = this.idacl_typec;
	            other.volume = this.volume;
	            other.nbr_camions = this.nbr_camions;
	            other.prix_m3 = this.prix_m3;
	            other.quantite = this.quantite;
	            other.destination = this.destination;
	            other.num_livraison = this.num_livraison;
	            other.id_conversion = this.id_conversion;
	            other.taux_1 = this.taux_1;
	            other.taux_2 = this.taux_2;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.validation = this.validation;
	            other.id_user_validation = this.id_user_validation;
	            other.idacl_monnaie = this.idacl_monnaie;
	            other.date_livrai = this.date_livrai;
	            other.accuse_commande = this.accuse_commande;
	            other.num_liv_jour = this.num_liv_jour;
	            
	}

	public void copyKeysDataTo(after_tDBInput_2Struct other) {

		other.idacl_livraison = this.idacl_livraison;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_livraison = dis.readLong();
					
			        this.idacl_personnel = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
			        this.idacl_vehicule = dis.readLong();
					
			        this.idacl_typec = dis.readLong();
					
						this.volume = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nbr_camions = null;
           				} else {
           			    	this.nbr_camions = dis.readLong();
           				}
					
						this.prix_m3 = (BigDecimal) dis.readObject();
					
						this.quantite = (BigDecimal) dis.readObject();
					
					this.destination = readString(dis);
					
					this.num_livraison = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idacl_monnaie = null;
           				} else {
           			    	this.idacl_monnaie = dis.readLong();
           				}
					
					this.date_livrai = readString(dis);
					
					this.accuse_commande = readString(dis);
					
						this.num_liv_jour = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_livraison);
					
					// long
				
		            	dos.writeLong(this.idacl_personnel);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// long
				
		            	dos.writeLong(this.idacl_vehicule);
					
					// long
				
		            	dos.writeLong(this.idacl_typec);
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume);
					
					// Long
				
						if(this.nbr_camions == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nbr_camions);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_m3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.quantite);
					
					// String
				
						writeString(this.destination,dos);
					
					// String
				
						writeString(this.num_livraison,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
					// Long
				
						if(this.idacl_monnaie == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idacl_monnaie);
		            	}
					
					// String
				
						writeString(this.date_livrai,dos);
					
					// String
				
						writeString(this.accuse_commande,dos);
					
					// Integer
				
						writeInteger(this.num_liv_jour,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_livraison="+String.valueOf(idacl_livraison));
		sb.append(",idacl_personnel="+String.valueOf(idacl_personnel));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",idacl_vehicule="+String.valueOf(idacl_vehicule));
		sb.append(",idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",volume="+String.valueOf(volume));
		sb.append(",nbr_camions="+String.valueOf(nbr_camions));
		sb.append(",prix_m3="+String.valueOf(prix_m3));
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",destination="+destination);
		sb.append(",num_livraison="+num_livraison);
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
		sb.append(",idacl_monnaie="+String.valueOf(idacl_monnaie));
		sb.append(",date_livrai="+date_livrai);
		sb.append(",accuse_commande="+accuse_commande);
		sb.append(",num_liv_jour="+String.valueOf(num_liv_jour));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_livraison, other.idacl_livraison);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputExcel_1Process(globalMap);

		row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
commandesStruct commandes = new commandesStruct();






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("commandes" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		



int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;
String dbschema_tDBOutput_2 = null;
String tableName_tDBOutput_2 = null;
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_2;

java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;
    dbschema_tDBOutput_2 = "";
    String driverClass_tDBOutput_2 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_2);
    String port_tDBOutput_2 = "1433";
    String dbname_tDBOutput_2 = "GestEntCom" ;
    String url_tDBOutput_2 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_2)) {
    	url_tDBOutput_2 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_2)) {
				url_tDBOutput_2 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_2 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_2 = "sa";

 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;	
    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
		resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
	
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
    tableName_tDBOutput_2 = "acl_livraison";
} else {
    tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "acl_livraison";
}
	int count_tDBOutput_2=0;

                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_2.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_2 + "]" );
                                        whetherExist_tDBOutput_2 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_2 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE [" + tableName_tDBOutput_2 + "]([idacl_livraison] BIGINT  not null ,[idacl_typec] BIGINT  not null ,[idacl_client] BIGINT  not null ,[idacl_monnaie] BIGINT  not null ,[idacl_personnel] BIGINT  not null ,[idacl_vehicule] BIGINT  not null ,[volume] DECIMAL(10,2)  ,[nbr_camions] BIGINT ,[prix_m3] DECIMAL(18,2)  ,[quantite] DECIMAL(10,2)  ,[destination] VARCHAR(150)  ,[num_livraison] VARCHAR(20)  ,[id_conversion] BIGINT ,[taux_1] DECIMAL(10,2)  ,[taux_2] DECIMAL(10,2)  ,[id_user] BIGINT ,[est_supprime] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[validation] BIGINT ,[id_user_validation] BIGINT ,[date_livrai] VARCHAR(12)  ,[accuse_commande] VARCHAR(30)  ,[num_liv_jour] BIGINT ,[tot_liv_prix_cfa] FLOAT(50)  ,[tot_liv_prix_dalaxy] FLOAT(50)  ,primary key([idacl_livraison]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_2 + "] WHERE [idacl_livraison] = ?");
        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
        String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2 + "] ([idacl_livraison],[idacl_typec],[idacl_client],[idacl_monnaie],[idacl_personnel],[idacl_vehicule],[volume],[nbr_camions],[prix_m3],[quantite],[destination],[num_livraison],[id_conversion],[taux_1],[taux_2],[id_user],[est_supprime],[date_creation],[date_last_modif],[validation],[id_user_validation],[date_livrai],[accuse_commande],[num_liv_jour],[tot_liv_prix_cfa],[tot_liv_prix_dalaxy]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
        resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
        String update_tDBOutput_2 = "UPDATE [" + tableName_tDBOutput_2 + "] SET [idacl_typec] = ?,[idacl_client] = ?,[idacl_monnaie] = ?,[idacl_personnel] = ?,[idacl_vehicule] = ?,[volume] = ?,[nbr_camions] = ?,[prix_m3] = ?,[quantite] = ?,[destination] = ?,[num_livraison] = ?,[id_conversion] = ?,[taux_1] = ?,[taux_2] = ?,[id_user] = ?,[est_supprime] = ?,[date_creation] = ?,[date_last_modif] = ?,[validation] = ?,[id_user_validation] = ?,[date_livrai] = ?,[accuse_commande] = ?,[num_liv_jour] = ?,[tot_liv_prix_cfa] = ?,[tot_liv_prix_dalaxy] = ? WHERE [idacl_livraison] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
        resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
commandesStruct commandes_tmp = new commandesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  `acl_livraison`.`idacl_livraison`, \n  `acl_livraison`.`idacl_personnel`, \n  `acl_livraison`.`idacl_client`, \n"
+"  `acl_livraison`.`idacl_vehicule`, \n  `acl_livraison`.`idacl_typec`, \n  `acl_livraison`.`volume`, \n  `acl_livraison`.`n"
+"br_camions`, \n  `acl_livraison`.`prix_m3`, \n  `acl_livraison`.`quantite`, \n  `acl_livraison`.`destination`, \n  `acl_livr"
+"aison`.`num_livraison`, \n  `acl_livraison`.`id_conversion`, \n  `acl_livraison`.`taux_1`, \n  `acl_livraison`.`taux_2`, \n "
+" `acl_livraison`.`id_user`, \n  `acl_livraison`.`est_supprime`, \n  `acl_livraison`.`date_creation`, \n  `acl_livraison`.`d"
+"ate_last_modif`, \n  `acl_livraison`.`validation`, \n  `acl_livraison`.`id_user_validation`, \n  `acl_livraison`.`idacl_mon"
+"naie`, \n  `acl_livraison`.`date_livrai`, \n  `acl_livraison`.`accuse_commande`, \n  `acl_livraison`.`num_liv_jour`\nFROM `a"
+"cl_livraison`";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row3.idacl_livraison = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(1) != null) {
                row3.idacl_livraison = rs_tDBInput_2.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row3.idacl_personnel = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(2) != null) {
                row3.idacl_personnel = rs_tDBInput_2.getLong(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row3.idacl_client = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(3) != null) {
                row3.idacl_client = rs_tDBInput_2.getLong(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row3.idacl_vehicule = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(4) != null) {
                row3.idacl_vehicule = rs_tDBInput_2.getLong(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row3.idacl_typec = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(5) != null) {
                row3.idacl_typec = rs_tDBInput_2.getLong(5);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row3.volume = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(6) != null) {
                row3.volume = rs_tDBInput_2.getBigDecimal(6);
            } else {
                    row3.volume = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row3.nbr_camions = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(7) != null) {
                row3.nbr_camions = rs_tDBInput_2.getLong(7);
            } else {
                    row3.nbr_camions = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row3.prix_m3 = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(8) != null) {
                row3.prix_m3 = rs_tDBInput_2.getBigDecimal(8);
            } else {
                    row3.prix_m3 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row3.quantite = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(9) != null) {
                row3.quantite = rs_tDBInput_2.getBigDecimal(9);
            } else {
                    row3.quantite = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row3.destination = null;
							} else {
	                         		
        	row3.destination = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row3.num_livraison = null;
							} else {
	                         		
        	row3.num_livraison = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row3.id_conversion = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(12) != null) {
                row3.id_conversion = rs_tDBInput_2.getLong(12);
            } else {
                    row3.id_conversion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row3.taux_1 = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(13) != null) {
                row3.taux_1 = rs_tDBInput_2.getBigDecimal(13);
            } else {
                    row3.taux_1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row3.taux_2 = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(14) != null) {
                row3.taux_2 = rs_tDBInput_2.getBigDecimal(14);
            } else {
                    row3.taux_2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row3.id_user = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(15) != null) {
                row3.id_user = rs_tDBInput_2.getLong(15);
            } else {
                    row3.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row3.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(16) != null) {
                row3.est_supprime = rs_tDBInput_2.getLong(16);
            } else {
                    row3.est_supprime = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row3.date_creation = null;
							} else {
										
				if(rs_tDBInput_2.getString(17) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(17);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row3.date_creation = rs_tDBInput_2.getTimestamp(17);
					} else {
						row3.date_creation = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row3.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row3.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_2.getString(18) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(18);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row3.date_last_modif = rs_tDBInput_2.getTimestamp(18);
					} else {
						row3.date_last_modif = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row3.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row3.validation = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(19) != null) {
                row3.validation = rs_tDBInput_2.getLong(19);
            } else {
                    row3.validation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row3.id_user_validation = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(20) != null) {
                row3.id_user_validation = rs_tDBInput_2.getLong(20);
            } else {
                    row3.id_user_validation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row3.idacl_monnaie = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(21) != null) {
                row3.idacl_monnaie = rs_tDBInput_2.getLong(21);
            } else {
                    row3.idacl_monnaie = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row3.date_livrai = null;
							} else {
	                         		
        	row3.date_livrai = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row3.accuse_commande = null;
							} else {
	                         		
        	row3.accuse_commande = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row3.num_liv_jour = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(24) != null) {
                row3.num_liv_jour = rs_tDBInput_2.getInt(24);
            } else {
                    row3.num_liv_jour = null;
            }
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

          row4 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("||");
            ope_tFilterRow_2.matches((row3.est_supprime == null? false : row3.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_2.matches((row3.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row4 == null){ 
                row4 = new row4Struct();
              }
               row4.idacl_livraison = row3.idacl_livraison;
               row4.idacl_personnel = row3.idacl_personnel;
               row4.idacl_client = row3.idacl_client;
               row4.idacl_vehicule = row3.idacl_vehicule;
               row4.idacl_typec = row3.idacl_typec;
               row4.volume = row3.volume;
               row4.nbr_camions = row3.nbr_camions;
               row4.prix_m3 = row3.prix_m3;
               row4.quantite = row3.quantite;
               row4.destination = row3.destination;
               row4.num_livraison = row3.num_livraison;
               row4.id_conversion = row3.id_conversion;
               row4.taux_1 = row3.taux_1;
               row4.taux_2 = row3.taux_2;
               row4.id_user = row3.id_user;
               row4.est_supprime = row3.est_supprime;
               row4.date_creation = row3.date_creation;
               row4.date_last_modif = row3.date_last_modif;
               row4.validation = row3.validation;
               row4.id_user_validation = row3.id_user_validation;
               row4.idacl_monnaie = row3.idacl_monnaie;
               row4.date_livrai = row3.date_livrai;
               row4.accuse_commande = row3.accuse_commande;
               row4.num_liv_jour = row3.num_liv_jour;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row5HashKey.idacl_client = row4.idacl_client ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.idacl_client = '" + row5HashKey.idacl_client + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

commandes = null;


// # Output table : 'commandes'
commandes_tmp.idacl_livraison = row4.idacl_livraison ;
commandes_tmp.idacl_typec = row4.idacl_typec ;
commandes_tmp.idacl_client = row4.idacl_client ;
commandes_tmp.idacl_monnaie = row4.idacl_monnaie ;
commandes_tmp.idacl_personnel = row4.idacl_personnel ;
commandes_tmp.idacl_vehicule = row4.idacl_vehicule ;
commandes_tmp.volume = row4.volume ;
commandes_tmp.nbr_camions = row4.nbr_camions ;
commandes_tmp.prix_m3 = row4.prix_m3 ;
commandes_tmp.quantite = row4.quantite ;
commandes_tmp.destination = row4.destination ;
commandes_tmp.num_livraison = row4.num_livraison ;
commandes_tmp.id_conversion = row4.id_conversion ;
commandes_tmp.taux_1 = row4.taux_1 ;
commandes_tmp.taux_2 = row4.taux_2 ;
commandes_tmp.id_user = row4.id_user ;
commandes_tmp.est_supprime = row4.est_supprime ;
commandes_tmp.date_creation = row4.date_creation ;
commandes_tmp.date_last_modif = row4.date_last_modif ;
commandes_tmp.validation = row4.validation ;
commandes_tmp.id_user_validation = row4.id_user_validation ;
commandes_tmp.date_livrai = row4.date_livrai ;
commandes_tmp.accuse_commande = row4.accuse_commande ;
commandes_tmp.num_liv_jour = row4.num_liv_jour ;
commandes_tmp.tot_liv_prix_cfa = row5.prix_tot_liv_cfa ;
commandes_tmp.tot_liv_prix_dalaxy = row5.prix_tot_liv_dalasy ;
commandes = commandes_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "commandes"
if(commandes != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//commandes
			//commandes


			
				if(execStat){
					runStat.updateStatOnConnection("commandes"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;


                    pstmt_tDBOutput_2.setLong(1, commandes.idacl_livraison);

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        pstmtUpdate_tDBOutput_2.setLong(1, commandes.idacl_typec);

                        pstmtUpdate_tDBOutput_2.setLong(2, commandes.idacl_client);

                        pstmtUpdate_tDBOutput_2.setLong(3, commandes.idacl_monnaie);

                        pstmtUpdate_tDBOutput_2.setLong(4, commandes.idacl_personnel);

                        pstmtUpdate_tDBOutput_2.setLong(5, commandes.idacl_vehicule);

                        pstmtUpdate_tDBOutput_2.setBigDecimal(6, commandes.volume);

                        if(commandes.nbr_camions == null) {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(7, commandes.nbr_camions);
}

                        pstmtUpdate_tDBOutput_2.setBigDecimal(8, commandes.prix_m3);

                        pstmtUpdate_tDBOutput_2.setBigDecimal(9, commandes.quantite);

                        if(commandes.destination == null) {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(10, commandes.destination);
}

                        if(commandes.num_livraison == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(11, commandes.num_livraison);
}

                        if(commandes.id_conversion == null) {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(12, commandes.id_conversion);
}

                        pstmtUpdate_tDBOutput_2.setBigDecimal(13, commandes.taux_1);

                        pstmtUpdate_tDBOutput_2.setBigDecimal(14, commandes.taux_2);

                        if(commandes.id_user == null) {
pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(15, commandes.id_user);
}

                        if(commandes.est_supprime == null) {
pstmtUpdate_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(16, commandes.est_supprime);
}

                        if(commandes.date_creation != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(17, new java.sql.Timestamp(commandes.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(17, java.sql.Types.DATE);
}

                        if(commandes.date_last_modif != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(18, new java.sql.Timestamp(commandes.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(18, java.sql.Types.DATE);
}

                        if(commandes.validation == null) {
pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(19, commandes.validation);
}

                        if(commandes.id_user_validation == null) {
pstmtUpdate_tDBOutput_2.setNull(20, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(20, commandes.id_user_validation);
}

                        if(commandes.date_livrai == null) {
pstmtUpdate_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(21, commandes.date_livrai);
}

                        if(commandes.accuse_commande == null) {
pstmtUpdate_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(22, commandes.accuse_commande);
}

                        if(commandes.num_liv_jour == null) {
pstmtUpdate_tDBOutput_2.setNull(23, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(23, commandes.num_liv_jour);
}

                        if(commandes.tot_liv_prix_cfa == null) {
pstmtUpdate_tDBOutput_2.setNull(24, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_2.setFloat(24, commandes.tot_liv_prix_cfa);
}

                        if(commandes.tot_liv_prix_dalaxy == null) {
pstmtUpdate_tDBOutput_2.setNull(25, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_2.setFloat(25, commandes.tot_liv_prix_dalaxy);
}


	                    

                        pstmtUpdate_tDBOutput_2.setLong(26 + count_tDBOutput_2, commandes.idacl_livraison);

            try {
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_2 = true;
                    	nb_line_tDBOutput_2++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_2.setLong(1, commandes.idacl_livraison);

                        pstmtInsert_tDBOutput_2.setLong(2, commandes.idacl_typec);

                        pstmtInsert_tDBOutput_2.setLong(3, commandes.idacl_client);

                        pstmtInsert_tDBOutput_2.setLong(4, commandes.idacl_monnaie);

                        pstmtInsert_tDBOutput_2.setLong(5, commandes.idacl_personnel);

                        pstmtInsert_tDBOutput_2.setLong(6, commandes.idacl_vehicule);

                        pstmtInsert_tDBOutput_2.setBigDecimal(7, commandes.volume);

                        if(commandes.nbr_camions == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(8, commandes.nbr_camions);
}

                        pstmtInsert_tDBOutput_2.setBigDecimal(9, commandes.prix_m3);

                        pstmtInsert_tDBOutput_2.setBigDecimal(10, commandes.quantite);

                        if(commandes.destination == null) {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(11, commandes.destination);
}

                        if(commandes.num_livraison == null) {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(12, commandes.num_livraison);
}

                        if(commandes.id_conversion == null) {
pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(13, commandes.id_conversion);
}

                        pstmtInsert_tDBOutput_2.setBigDecimal(14, commandes.taux_1);

                        pstmtInsert_tDBOutput_2.setBigDecimal(15, commandes.taux_2);

                        if(commandes.id_user == null) {
pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(16, commandes.id_user);
}

                        if(commandes.est_supprime == null) {
pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(17, commandes.est_supprime);
}

                        if(commandes.date_creation != null) {
pstmtInsert_tDBOutput_2.setTimestamp(18, new java.sql.Timestamp(commandes.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.DATE);
}

                        if(commandes.date_last_modif != null) {
pstmtInsert_tDBOutput_2.setTimestamp(19, new java.sql.Timestamp(commandes.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.DATE);
}

                        if(commandes.validation == null) {
pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(20, commandes.validation);
}

                        if(commandes.id_user_validation == null) {
pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(21, commandes.id_user_validation);
}

                        if(commandes.date_livrai == null) {
pstmtInsert_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(22, commandes.date_livrai);
}

                        if(commandes.accuse_commande == null) {
pstmtInsert_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(23, commandes.accuse_commande);
}

                        if(commandes.num_liv_jour == null) {
pstmtInsert_tDBOutput_2.setNull(24, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(24, commandes.num_liv_jour);
}

                        if(commandes.tot_liv_prix_cfa == null) {
pstmtInsert_tDBOutput_2.setNull(25, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_2.setFloat(25, commandes.tot_liv_prix_cfa);
}

                        if(commandes.tot_liv_prix_dalaxy == null) {
pstmtInsert_tDBOutput_2.setNull(26, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_2.setFloat(26, commandes.tot_liv_prix_dalaxy);
}

            try {
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_2 = true;
                    	nb_line_tDBOutput_2++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_2{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
						
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	
                	conn_tDBOutput_2.commit();
            		
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "commandes"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
            conn_tDBOutput_2.commit();
			
        conn_tDBOutput_2 .close();
        resourceMap.put("finish_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("commandes"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idacl_client;

				public Long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public Float prix_tot_liv_cfa;

				public Float getPrix_tot_liv_cfa () {
					return this.prix_tot_liv_cfa;
				}
				
			    public Float prix_tot_liv_dalasy;

				public Float getPrix_tot_liv_dalasy () {
					return this.prix_tot_liv_dalasy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idacl_client == null) ? 0 : this.idacl_client.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.idacl_client == null) {
							if (other.idacl_client != null)
								return false;
						
						} else if (!this.idacl_client.equals(other.idacl_client))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.idacl_client = this.idacl_client;
	            other.prix_tot_liv_cfa = this.prix_tot_liv_cfa;
	            other.prix_tot_liv_dalasy = this.prix_tot_liv_dalasy;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.idacl_client = this.idacl_client;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idacl_client = null;
           				} else {
           			    	this.idacl_client = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idacl_client == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idacl_client);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_tot_liv_cfa = null;
           				} else {
           			    	this.prix_tot_liv_cfa = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_tot_liv_dalasy = null;
           				} else {
           			    	this.prix_tot_liv_dalasy = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.prix_tot_liv_cfa == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_tot_liv_cfa);
		            	}
					
						if(this.prix_tot_liv_dalasy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_tot_liv_dalasy);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_client="+String.valueOf(idacl_client));
		sb.append(",prix_tot_liv_cfa="+String.valueOf(prix_tot_liv_cfa));
		sb.append(",prix_tot_liv_dalasy="+String.valueOf(prix_tot_liv_dalasy));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_client, other.idacl_client);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tFileInputExcel_1 - inputs:(after_tDBInput_2) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_2 - inputs:(row4,row5) outputs:(commandes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		


			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = "D:/Danis_ITS4/DatawareHouse_TP/Tp_DW_DanisJIOGUE/Tp_DW_Danis_JIOGUE/LivraisonVersement.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, "livraison", false));
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row5 = null;
		    row5 = null;
					int tempRowLength_tFileInputExcel_1 = 3;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row5 = new row5Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "idacl_client";

				row5.idacl_client = ParserUtils.parseTo_Long(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, ','));
			}else{
				row5.idacl_client = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "prix_tot_liv_cfa";

				row5.prix_tot_liv_cfa = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, ','));
			}else{
				row5.prix_tot_liv_cfa = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "prix_tot_liv_dalasy";

				row5.prix_tot_liv_dalasy = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, ','));
			}else{
				row5.prix_tot_liv_dalasy = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row5 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.idacl_client = row5.idacl_client;
				
				row5_HashRow.prix_tot_liv_cfa = row5.prix_tot_liv_cfa;
				
				row5_HashRow.prix_tot_liv_dalasy = row5.prix_tot_liv_dalasy;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class versementStruct implements routines.system.IPersistableRow<versementStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_versement;

				public long getIdacl_versement () {
					return this.idacl_versement;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public String date_versement;

				public String getDate_versement () {
					return this.date_versement;
				}
				
			    public BigDecimal montant;

				public BigDecimal getMontant () {
					return this.montant;
				}
				
			    public String num_cheque;

				public String getNum_cheque () {
					return this.num_cheque;
				}
				
			    public String type_versement;

				public String getType_versement () {
					return this.type_versement;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public Long id_monnaie1;

				public Long getId_monnaie1 () {
					return this.id_monnaie1;
				}
				
			    public Long id_monnaie2;

				public Long getId_monnaie2 () {
					return this.id_monnaie2;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				
			    public Float tot_prix_v_cfa;

				public Float getTot_prix_v_cfa () {
					return this.tot_prix_v_cfa;
				}
				
			    public Float tot_prix_v_dalaxy;

				public Float getTot_prix_v_dalaxy () {
					return this.tot_prix_v_dalaxy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_versement;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final versementStruct other = (versementStruct) obj;
		
						if (this.idacl_versement != other.idacl_versement)
							return false;
					

		return true;
    }

	public void copyDataTo(versementStruct other) {

		other.idacl_versement = this.idacl_versement;
	            other.idacl_client = this.idacl_client;
	            other.date_versement = this.date_versement;
	            other.montant = this.montant;
	            other.num_cheque = this.num_cheque;
	            other.type_versement = this.type_versement;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.id_conversion = this.id_conversion;
	            other.id_monnaie1 = this.id_monnaie1;
	            other.id_monnaie2 = this.id_monnaie2;
	            other.taux_1 = this.taux_1;
	            other.taux_2 = this.taux_2;
	            other.validation = this.validation;
	            other.id_user_validation = this.id_user_validation;
	            other.tot_prix_v_cfa = this.tot_prix_v_cfa;
	            other.tot_prix_v_dalaxy = this.tot_prix_v_dalaxy;
	            
	}

	public void copyKeysDataTo(versementStruct other) {

		other.idacl_versement = this.idacl_versement;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_versement = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
					this.date_versement = readString(dis);
					
						this.montant = (BigDecimal) dis.readObject();
					
					this.num_cheque = readString(dis);
					
					this.type_versement = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie1 = null;
           				} else {
           			    	this.id_monnaie1 = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie2 = null;
           				} else {
           			    	this.id_monnaie2 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tot_prix_v_cfa = null;
           				} else {
           			    	this.tot_prix_v_cfa = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tot_prix_v_dalaxy = null;
           				} else {
           			    	this.tot_prix_v_dalaxy = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_versement);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// String
				
						writeString(this.date_versement,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.montant);
					
					// String
				
						writeString(this.num_cheque,dos);
					
					// String
				
						writeString(this.type_versement,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// Long
				
						if(this.id_monnaie1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie1);
		            	}
					
					// Long
				
						if(this.id_monnaie2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
					// Float
				
						if(this.tot_prix_v_cfa == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tot_prix_v_cfa);
		            	}
					
					// Float
				
						if(this.tot_prix_v_dalaxy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tot_prix_v_dalaxy);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_versement="+String.valueOf(idacl_versement));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",date_versement="+date_versement);
		sb.append(",montant="+String.valueOf(montant));
		sb.append(",num_cheque="+num_cheque);
		sb.append(",type_versement="+type_versement);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",id_monnaie1="+String.valueOf(id_monnaie1));
		sb.append(",id_monnaie2="+String.valueOf(id_monnaie2));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
		sb.append(",tot_prix_v_cfa="+String.valueOf(tot_prix_v_cfa));
		sb.append(",tot_prix_v_dalaxy="+String.valueOf(tot_prix_v_dalaxy));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(versementStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_versement, other.idacl_versement);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];

	
			    public long idacl_versement;

				public long getIdacl_versement () {
					return this.idacl_versement;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public String date_versement;

				public String getDate_versement () {
					return this.date_versement;
				}
				
			    public BigDecimal montant;

				public BigDecimal getMontant () {
					return this.montant;
				}
				
			    public String num_cheque;

				public String getNum_cheque () {
					return this.num_cheque;
				}
				
			    public String type_versement;

				public String getType_versement () {
					return this.type_versement;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public Long id_monnaie1;

				public Long getId_monnaie1 () {
					return this.id_monnaie1;
				}
				
			    public Long id_monnaie2;

				public Long getId_monnaie2 () {
					return this.id_monnaie2;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_versement = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
					this.date_versement = readString(dis);
					
						this.montant = (BigDecimal) dis.readObject();
					
					this.num_cheque = readString(dis);
					
					this.type_versement = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie1 = null;
           				} else {
           			    	this.id_monnaie1 = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie2 = null;
           				} else {
           			    	this.id_monnaie2 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_versement);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// String
				
						writeString(this.date_versement,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.montant);
					
					// String
				
						writeString(this.num_cheque,dos);
					
					// String
				
						writeString(this.type_versement,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// Long
				
						if(this.id_monnaie1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie1);
		            	}
					
					// Long
				
						if(this.id_monnaie2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_versement="+String.valueOf(idacl_versement));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",date_versement="+date_versement);
		sb.append(",montant="+String.valueOf(montant));
		sb.append(",num_cheque="+num_cheque);
		sb.append(",type_versement="+type_versement);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",id_monnaie1="+String.valueOf(id_monnaie1));
		sb.append(",id_monnaie2="+String.valueOf(id_monnaie2));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_versement;

				public long getIdacl_versement () {
					return this.idacl_versement;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public String date_versement;

				public String getDate_versement () {
					return this.date_versement;
				}
				
			    public BigDecimal montant;

				public BigDecimal getMontant () {
					return this.montant;
				}
				
			    public String num_cheque;

				public String getNum_cheque () {
					return this.num_cheque;
				}
				
			    public String type_versement;

				public String getType_versement () {
					return this.type_versement;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public Long id_monnaie1;

				public Long getId_monnaie1 () {
					return this.id_monnaie1;
				}
				
			    public Long id_monnaie2;

				public Long getId_monnaie2 () {
					return this.id_monnaie2;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_versement;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.idacl_versement != other.idacl_versement)
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.idacl_versement = this.idacl_versement;
	            other.idacl_client = this.idacl_client;
	            other.date_versement = this.date_versement;
	            other.montant = this.montant;
	            other.num_cheque = this.num_cheque;
	            other.type_versement = this.type_versement;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.id_conversion = this.id_conversion;
	            other.id_monnaie1 = this.id_monnaie1;
	            other.id_monnaie2 = this.id_monnaie2;
	            other.taux_1 = this.taux_1;
	            other.taux_2 = this.taux_2;
	            other.validation = this.validation;
	            other.id_user_validation = this.id_user_validation;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.idacl_versement = this.idacl_versement;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_versement = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
					this.date_versement = readString(dis);
					
						this.montant = (BigDecimal) dis.readObject();
					
					this.num_cheque = readString(dis);
					
					this.type_versement = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie1 = null;
           				} else {
           			    	this.id_monnaie1 = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie2 = null;
           				} else {
           			    	this.id_monnaie2 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_versement);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// String
				
						writeString(this.date_versement,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.montant);
					
					// String
				
						writeString(this.num_cheque,dos);
					
					// String
				
						writeString(this.type_versement,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// Long
				
						if(this.id_monnaie1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie1);
		            	}
					
					// Long
				
						if(this.id_monnaie2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_versement="+String.valueOf(idacl_versement));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",date_versement="+date_versement);
		sb.append(",montant="+String.valueOf(montant));
		sb.append(",num_cheque="+num_cheque);
		sb.append(",type_versement="+type_versement);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",id_monnaie1="+String.valueOf(id_monnaie1));
		sb.append(",id_monnaie2="+String.valueOf(id_monnaie2));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_versement, other.idacl_versement);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_versement;

				public long getIdacl_versement () {
					return this.idacl_versement;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public String date_versement;

				public String getDate_versement () {
					return this.date_versement;
				}
				
			    public BigDecimal montant;

				public BigDecimal getMontant () {
					return this.montant;
				}
				
			    public String num_cheque;

				public String getNum_cheque () {
					return this.num_cheque;
				}
				
			    public String type_versement;

				public String getType_versement () {
					return this.type_versement;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public Long id_monnaie1;

				public Long getId_monnaie1 () {
					return this.id_monnaie1;
				}
				
			    public Long id_monnaie2;

				public Long getId_monnaie2 () {
					return this.id_monnaie2;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_versement;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_3Struct other = (after_tDBInput_3Struct) obj;
		
						if (this.idacl_versement != other.idacl_versement)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_3Struct other) {

		other.idacl_versement = this.idacl_versement;
	            other.idacl_client = this.idacl_client;
	            other.date_versement = this.date_versement;
	            other.montant = this.montant;
	            other.num_cheque = this.num_cheque;
	            other.type_versement = this.type_versement;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.id_conversion = this.id_conversion;
	            other.id_monnaie1 = this.id_monnaie1;
	            other.id_monnaie2 = this.id_monnaie2;
	            other.taux_1 = this.taux_1;
	            other.taux_2 = this.taux_2;
	            other.validation = this.validation;
	            other.id_user_validation = this.id_user_validation;
	            
	}

	public void copyKeysDataTo(after_tDBInput_3Struct other) {

		other.idacl_versement = this.idacl_versement;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_versement = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
					this.date_versement = readString(dis);
					
						this.montant = (BigDecimal) dis.readObject();
					
					this.num_cheque = readString(dis);
					
					this.type_versement = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie1 = null;
           				} else {
           			    	this.id_monnaie1 = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie2 = null;
           				} else {
           			    	this.id_monnaie2 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_versement);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// String
				
						writeString(this.date_versement,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.montant);
					
					// String
				
						writeString(this.num_cheque,dos);
					
					// String
				
						writeString(this.type_versement,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// Long
				
						if(this.id_monnaie1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie1);
		            	}
					
					// Long
				
						if(this.id_monnaie2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_versement="+String.valueOf(idacl_versement));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",date_versement="+date_versement);
		sb.append(",montant="+String.valueOf(montant));
		sb.append(",num_cheque="+num_cheque);
		sb.append(",type_versement="+type_versement);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",id_monnaie1="+String.valueOf(id_monnaie1));
		sb.append(",id_monnaie2="+String.valueOf(id_monnaie2));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_versement, other.idacl_versement);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputExcel_2Process(globalMap);

		row6Struct row6 = new row6Struct();
row7Struct row7 = new row7Struct();
versementStruct versement = new versementStruct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("versement" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_3 = 0;
		



int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;
String dbschema_tDBOutput_3 = null;
String tableName_tDBOutput_3 = null;
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_3;

java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;
    dbschema_tDBOutput_3 = "";
    String driverClass_tDBOutput_3 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_3);
    String port_tDBOutput_3 = "1433";
    String dbname_tDBOutput_3 = "GestEntCom" ;
    String url_tDBOutput_3 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_3)) {
    	url_tDBOutput_3 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_3)) {
				url_tDBOutput_3 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_3 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_3 = "sa";

 
	final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;	
    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
		resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
	
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;


if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
    tableName_tDBOutput_3 = "acl_versement";
} else {
    tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "acl_versement";
}
	int count_tDBOutput_3=0;

                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_3.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_3 + "]" );
                                        whetherExist_tDBOutput_3 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_3 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE [" + tableName_tDBOutput_3 + "]([idacl_versement] BIGINT  not null ,[idacl_client] BIGINT  not null ,[date_versement] VARCHAR(12)  ,[montant] DECIMAL(20,2)  ,[num_cheque] VARCHAR(20)  ,[type_versement] VARCHAR(20)  ,[id_user] BIGINT ,[est_supprime] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[id_conversion] BIGINT ,[id_monnaie1] BIGINT ,[id_monnaie2] BIGINT ,[taux_1] DECIMAL(10,2)  ,[taux_2] DECIMAL(10,2)  ,[validation] BIGINT ,[id_user_validation] BIGINT ,[tot_prix_v_cfa] FLOAT(50)  ,[tot_prix_v_dalaxy] REAL ,primary key([idacl_versement]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_3 + "] WHERE [idacl_versement] = ?");
        resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
        String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3 + "] ([idacl_versement],[idacl_client],[date_versement],[montant],[num_cheque],[type_versement],[id_user],[est_supprime],[date_creation],[date_last_modif],[id_conversion],[id_monnaie1],[id_monnaie2],[taux_1],[taux_2],[validation],[id_user_validation],[tot_prix_v_cfa],[tot_prix_v_dalaxy]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
        resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
        String update_tDBOutput_3 = "UPDATE [" + tableName_tDBOutput_3 + "] SET [idacl_client] = ?,[date_versement] = ?,[montant] = ?,[num_cheque] = ?,[type_versement] = ?,[id_user] = ?,[est_supprime] = ?,[date_creation] = ?,[date_last_modif] = ?,[id_conversion] = ?,[id_monnaie1] = ?,[id_monnaie2] = ?,[taux_1] = ?,[taux_2] = ?,[validation] = ?,[id_user_validation] = ?,[tot_prix_v_cfa] = ?,[tot_prix_v_dalaxy] = ? WHERE [idacl_versement] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
        resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
versementStruct versement_tmp = new versementStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  `acl_versement`.`idacl_versement`, \n  `acl_versement`.`idacl_client`, \n  `acl_versement`.`date_versement`, \n "
+" `acl_versement`.`montant`, \n  `acl_versement`.`num_cheque`, \n  `acl_versement`.`type_versement`, \n  `acl_versement`.`id"
+"_user`, \n  `acl_versement`.`est_supprime`, \n  `acl_versement`.`date_creation`, \n  `acl_versement`.`date_last_modif`, \n  "
+"`acl_versement`.`id_conversion`, \n  `acl_versement`.`id_monnaie1`, \n  `acl_versement`.`id_monnaie2`, \n  `acl_versement`."
+"`taux_1`, \n  `acl_versement`.`taux_2`, \n  `acl_versement`.`validation`, \n  `acl_versement`.`id_user_validation`\nFROM `ac"
+"l_versement`";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row6.idacl_versement = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(1) != null) {
                row6.idacl_versement = rs_tDBInput_3.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row6.idacl_client = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(2) != null) {
                row6.idacl_client = rs_tDBInput_3.getLong(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row6.date_versement = null;
							} else {
	                         		
        	row6.date_versement = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row6.montant = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(4) != null) {
                row6.montant = rs_tDBInput_3.getBigDecimal(4);
            } else {
                    row6.montant = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row6.num_cheque = null;
							} else {
	                         		
        	row6.num_cheque = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row6.type_versement = null;
							} else {
	                         		
        	row6.type_versement = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row6.id_user = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(7) != null) {
                row6.id_user = rs_tDBInput_3.getLong(7);
            } else {
                    row6.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row6.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(8) != null) {
                row6.est_supprime = rs_tDBInput_3.getLong(8);
            } else {
                    row6.est_supprime = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row6.date_creation = null;
							} else {
										
				if(rs_tDBInput_3.getString(9) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(9);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row6.date_creation = rs_tDBInput_3.getTimestamp(9);
					} else {
						row6.date_creation = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row6.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row6.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_3.getString(10) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(10);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row6.date_last_modif = rs_tDBInput_3.getTimestamp(10);
					} else {
						row6.date_last_modif = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row6.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row6.id_conversion = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(11) != null) {
                row6.id_conversion = rs_tDBInput_3.getLong(11);
            } else {
                    row6.id_conversion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row6.id_monnaie1 = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(12) != null) {
                row6.id_monnaie1 = rs_tDBInput_3.getLong(12);
            } else {
                    row6.id_monnaie1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row6.id_monnaie2 = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(13) != null) {
                row6.id_monnaie2 = rs_tDBInput_3.getLong(13);
            } else {
                    row6.id_monnaie2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row6.taux_1 = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(14) != null) {
                row6.taux_1 = rs_tDBInput_3.getBigDecimal(14);
            } else {
                    row6.taux_1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row6.taux_2 = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(15) != null) {
                row6.taux_2 = rs_tDBInput_3.getBigDecimal(15);
            } else {
                    row6.taux_2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row6.validation = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(16) != null) {
                row6.validation = rs_tDBInput_3.getLong(16);
            } else {
                    row6.validation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row6.id_user_validation = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(17) != null) {
                row6.id_user_validation = rs_tDBInput_3.getLong(17);
            } else {
                    row6.id_user_validation = null;
            }
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

          row7 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("||");
            ope_tFilterRow_3.matches((row6.est_supprime == null? false : row6.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_3.matches((row6.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.idacl_versement = row6.idacl_versement;
               row7.idacl_client = row6.idacl_client;
               row7.date_versement = row6.date_versement;
               row7.montant = row6.montant;
               row7.num_cheque = row6.num_cheque;
               row7.type_versement = row6.type_versement;
               row7.id_user = row6.id_user;
               row7.est_supprime = row6.est_supprime;
               row7.date_creation = row6.date_creation;
               row7.date_last_modif = row6.date_last_modif;
               row7.id_conversion = row6.id_conversion;
               row7.id_monnaie1 = row6.id_monnaie1;
               row7.id_monnaie2 = row6.id_monnaie2;
               row7.taux_1 = row6.taux_1;
               row7.taux_2 = row6.taux_2;
               row7.validation = row6.validation;
               row7.id_user_validation = row6.id_user_validation;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row8HashKey.idacl_client = row7.idacl_client ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.idacl_client = '" + row8HashKey.idacl_client + "'");
								} // G 071
							

							row8Struct row8 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

versement = null;


// # Output table : 'versement'
versement_tmp.idacl_versement = row7.idacl_versement ;
versement_tmp.idacl_client = row7.idacl_client ;
versement_tmp.date_versement = row7.date_versement ;
versement_tmp.montant = row7.montant ;
versement_tmp.num_cheque = row7.num_cheque ;
versement_tmp.type_versement = row7.type_versement ;
versement_tmp.id_user = row7.id_user ;
versement_tmp.est_supprime = row7.est_supprime ;
versement_tmp.date_creation = row7.date_creation ;
versement_tmp.date_last_modif = row7.date_last_modif ;
versement_tmp.id_conversion = row7.id_conversion ;
versement_tmp.id_monnaie1 = row7.id_monnaie1 ;
versement_tmp.id_monnaie2 = row7.id_monnaie2 ;
versement_tmp.taux_1 = row7.taux_1 ;
versement_tmp.taux_2 = row7.taux_2 ;
versement_tmp.validation = row7.validation ;
versement_tmp.id_user_validation = row7.id_user_validation ;
versement_tmp.tot_prix_v_cfa = row8.prix_tot_v_cfa ;
versement_tmp.tot_prix_v_dalaxy = row8.prix_tot_v_dalasy ;
versement = versement_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "versement"
if(versement != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

			//versement
			//versement


			
				if(execStat){
					runStat.updateStatOnConnection("versement"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_3 = false;


                    pstmt_tDBOutput_3.setLong(1, versement.idacl_versement);

            int checkCount_tDBOutput_3 = -1;
            try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
                while(rs_tDBOutput_3.next()) {
                    checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
                }
            }
            if(checkCount_tDBOutput_3 > 0) {
                        pstmtUpdate_tDBOutput_3.setLong(1, versement.idacl_client);

                        if(versement.date_versement == null) {
pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(2, versement.date_versement);
}

                        pstmtUpdate_tDBOutput_3.setBigDecimal(3, versement.montant);

                        if(versement.num_cheque == null) {
pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(4, versement.num_cheque);
}

                        if(versement.type_versement == null) {
pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(5, versement.type_versement);
}

                        if(versement.id_user == null) {
pstmtUpdate_tDBOutput_3.setNull(6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setLong(6, versement.id_user);
}

                        if(versement.est_supprime == null) {
pstmtUpdate_tDBOutput_3.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setLong(7, versement.est_supprime);
}

                        if(versement.date_creation != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(8, new java.sql.Timestamp(versement.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(8, java.sql.Types.DATE);
}

                        if(versement.date_last_modif != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(9, new java.sql.Timestamp(versement.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(9, java.sql.Types.DATE);
}

                        if(versement.id_conversion == null) {
pstmtUpdate_tDBOutput_3.setNull(10, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setLong(10, versement.id_conversion);
}

                        if(versement.id_monnaie1 == null) {
pstmtUpdate_tDBOutput_3.setNull(11, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setLong(11, versement.id_monnaie1);
}

                        if(versement.id_monnaie2 == null) {
pstmtUpdate_tDBOutput_3.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setLong(12, versement.id_monnaie2);
}

                        pstmtUpdate_tDBOutput_3.setBigDecimal(13, versement.taux_1);

                        pstmtUpdate_tDBOutput_3.setBigDecimal(14, versement.taux_2);

                        if(versement.validation == null) {
pstmtUpdate_tDBOutput_3.setNull(15, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setLong(15, versement.validation);
}

                        if(versement.id_user_validation == null) {
pstmtUpdate_tDBOutput_3.setNull(16, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setLong(16, versement.id_user_validation);
}

                        if(versement.tot_prix_v_cfa == null) {
pstmtUpdate_tDBOutput_3.setNull(17, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_3.setFloat(17, versement.tot_prix_v_cfa);
}

                        if(versement.tot_prix_v_dalaxy == null) {
pstmtUpdate_tDBOutput_3.setNull(18, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_3.setFloat(18, versement.tot_prix_v_dalaxy);
}


	                    

                        pstmtUpdate_tDBOutput_3.setLong(19 + count_tDBOutput_3, versement.idacl_versement);

            try {
                    updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3 + pstmtUpdate_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_3 = true;
                    	nb_line_tDBOutput_3++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_3.setLong(1, versement.idacl_versement);

                        pstmtInsert_tDBOutput_3.setLong(2, versement.idacl_client);

                        if(versement.date_versement == null) {
pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(3, versement.date_versement);
}

                        pstmtInsert_tDBOutput_3.setBigDecimal(4, versement.montant);

                        if(versement.num_cheque == null) {
pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(5, versement.num_cheque);
}

                        if(versement.type_versement == null) {
pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(6, versement.type_versement);
}

                        if(versement.id_user == null) {
pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setLong(7, versement.id_user);
}

                        if(versement.est_supprime == null) {
pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setLong(8, versement.est_supprime);
}

                        if(versement.date_creation != null) {
pstmtInsert_tDBOutput_3.setTimestamp(9, new java.sql.Timestamp(versement.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(9, java.sql.Types.DATE);
}

                        if(versement.date_last_modif != null) {
pstmtInsert_tDBOutput_3.setTimestamp(10, new java.sql.Timestamp(versement.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(10, java.sql.Types.DATE);
}

                        if(versement.id_conversion == null) {
pstmtInsert_tDBOutput_3.setNull(11, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setLong(11, versement.id_conversion);
}

                        if(versement.id_monnaie1 == null) {
pstmtInsert_tDBOutput_3.setNull(12, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setLong(12, versement.id_monnaie1);
}

                        if(versement.id_monnaie2 == null) {
pstmtInsert_tDBOutput_3.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setLong(13, versement.id_monnaie2);
}

                        pstmtInsert_tDBOutput_3.setBigDecimal(14, versement.taux_1);

                        pstmtInsert_tDBOutput_3.setBigDecimal(15, versement.taux_2);

                        if(versement.validation == null) {
pstmtInsert_tDBOutput_3.setNull(16, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setLong(16, versement.validation);
}

                        if(versement.id_user_validation == null) {
pstmtInsert_tDBOutput_3.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setLong(17, versement.id_user_validation);
}

                        if(versement.tot_prix_v_cfa == null) {
pstmtInsert_tDBOutput_3.setNull(18, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_3.setFloat(18, versement.tot_prix_v_cfa);
}

                        if(versement.tot_prix_v_dalaxy == null) {
pstmtInsert_tDBOutput_3.setNull(19, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_3.setFloat(19, versement.tot_prix_v_dalaxy);
}

            try {
                    insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_3 = true;
                    	nb_line_tDBOutput_3++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_3{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
						
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	
                	conn_tDBOutput_3.commit();
            		
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "versement"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
		}
		
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtUpdate_tDBOutput_3 != null){
            pstmtUpdate_tDBOutput_3.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_3");
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
            conn_tDBOutput_3.commit();
			
        conn_tDBOutput_3 .close();
        resourceMap.put("finish_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("versement"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
                if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_3")) != null) {
                    pstmtUpdateToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
                if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_3")) != null) {
                    pstmtInsertToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idacl_client;

				public Long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public Float prix_tot_v_cfa;

				public Float getPrix_tot_v_cfa () {
					return this.prix_tot_v_cfa;
				}
				
			    public Float prix_tot_v_dalasy;

				public Float getPrix_tot_v_dalasy () {
					return this.prix_tot_v_dalasy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idacl_client == null) ? 0 : this.idacl_client.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.idacl_client == null) {
							if (other.idacl_client != null)
								return false;
						
						} else if (!this.idacl_client.equals(other.idacl_client))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.idacl_client = this.idacl_client;
	            other.prix_tot_v_cfa = this.prix_tot_v_cfa;
	            other.prix_tot_v_dalasy = this.prix_tot_v_dalasy;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.idacl_client = this.idacl_client;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idacl_client = null;
           				} else {
           			    	this.idacl_client = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idacl_client == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idacl_client);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_tot_v_cfa = null;
           				} else {
           			    	this.prix_tot_v_cfa = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_tot_v_dalasy = null;
           				} else {
           			    	this.prix_tot_v_dalasy = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.prix_tot_v_cfa == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_tot_v_cfa);
		            	}
					
						if(this.prix_tot_v_dalasy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_tot_v_dalasy);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_client="+String.valueOf(idacl_client));
		sb.append(",prix_tot_v_cfa="+String.valueOf(prix_tot_v_cfa));
		sb.append(",prix_tot_v_dalasy="+String.valueOf(prix_tot_v_dalasy));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_client, other.idacl_client);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tFileInputExcel_2 - inputs:(after_tDBInput_3) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_3 - inputs:(row7,row8) outputs:(versement)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		


			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = "D:/Danis_ITS4/DatawareHouse_TP/Tp_DW_DanisJIOGUE/Tp_DW_Danis_JIOGUE/LivraisonVersement.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, "versement", false));
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row8 = null;
		    row8 = null;
					int tempRowLength_tFileInputExcel_2 = 3;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row8 = new row8Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "idacl_client";

				row8.idacl_client = ParserUtils.parseTo_Long(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, ','));
			}else{
				row8.idacl_client = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "prix_tot_v_cfa";

				row8.prix_tot_v_cfa = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, ','));
			}else{
				row8.prix_tot_v_cfa = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "prix_tot_v_dalasy";

				row8.prix_tot_v_dalasy = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, ','));
			}else{
				row8.prix_tot_v_dalasy = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row8 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.idacl_client = row8.idacl_client;
				
				row8_HashRow.prix_tot_v_cfa = row8.prix_tot_v_cfa;
				
				row8_HashRow.prix_tot_v_dalasy = row8.prix_tot_v_dalasy;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	


public static class cmdStruct implements routines.system.IPersistableRow<cmdStruct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_commande;

				public long getIdacl_commande () {
					return this.idacl_commande;
				}
				
			    public int idacl_typec;

				public int getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public String date_commande;

				public String getDate_commande () {
					return this.date_commande;
				}
				
			    public Long nbr_camions;

				public Long getNbr_camions () {
					return this.nbr_camions;
				}
				
			    public BigDecimal volume_unitaire;

				public BigDecimal getVolume_unitaire () {
					return this.volume_unitaire;
				}
				
			    public BigDecimal volume_tot;

				public BigDecimal getVolume_tot () {
					return this.volume_tot;
				}
				
			    public BigDecimal prix_unitaire;

				public BigDecimal getPrix_unitaire () {
					return this.prix_unitaire;
				}
				
			    public BigDecimal prix_tot;

				public BigDecimal getPrix_tot () {
					return this.prix_tot;
				}
				
			    public String paye_comptant;

				public String getPaye_comptant () {
					return this.paye_comptant;
				}
				
			    public String accuse_commande;

				public String getAccuse_commande () {
					return this.accuse_commande;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public String num_commande;

				public String getNum_commande () {
					return this.num_commande;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public Long id_monnaie1;

				public Long getId_monnaie1 () {
					return this.id_monnaie1;
				}
				
			    public Long id_monnaie2;

				public Long getId_monnaie2 () {
					return this.id_monnaie2;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				
			    public Integer num_cmd_jour;

				public Integer getNum_cmd_jour () {
					return this.num_cmd_jour;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_commande;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final cmdStruct other = (cmdStruct) obj;
		
						if (this.idacl_commande != other.idacl_commande)
							return false;
					

		return true;
    }

	public void copyDataTo(cmdStruct other) {

		other.idacl_commande = this.idacl_commande;
	            other.idacl_typec = this.idacl_typec;
	            other.idacl_client = this.idacl_client;
	            other.date_commande = this.date_commande;
	            other.nbr_camions = this.nbr_camions;
	            other.volume_unitaire = this.volume_unitaire;
	            other.volume_tot = this.volume_tot;
	            other.prix_unitaire = this.prix_unitaire;
	            other.prix_tot = this.prix_tot;
	            other.paye_comptant = this.paye_comptant;
	            other.accuse_commande = this.accuse_commande;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.num_commande = this.num_commande;
	            other.id_conversion = this.id_conversion;
	            other.id_monnaie1 = this.id_monnaie1;
	            other.id_monnaie2 = this.id_monnaie2;
	            other.taux_1 = this.taux_1;
	            other.taux_2 = this.taux_2;
	            other.validation = this.validation;
	            other.id_user_validation = this.id_user_validation;
	            other.num_cmd_jour = this.num_cmd_jour;
	            
	}

	public void copyKeysDataTo(cmdStruct other) {

		other.idacl_commande = this.idacl_commande;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_commande = dis.readLong();
					
			        this.idacl_typec = dis.readInt();
					
			        this.idacl_client = dis.readLong();
					
					this.date_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nbr_camions = null;
           				} else {
           			    	this.nbr_camions = dis.readLong();
           				}
					
						this.volume_unitaire = (BigDecimal) dis.readObject();
					
						this.volume_tot = (BigDecimal) dis.readObject();
					
						this.prix_unitaire = (BigDecimal) dis.readObject();
					
						this.prix_tot = (BigDecimal) dis.readObject();
					
					this.paye_comptant = readString(dis);
					
					this.accuse_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
					this.num_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie1 = null;
           				} else {
           			    	this.id_monnaie1 = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie2 = null;
           				} else {
           			    	this.id_monnaie2 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
						this.num_cmd_jour = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_commande);
					
					// int
				
		            	dos.writeInt(this.idacl_typec);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// String
				
						writeString(this.date_commande,dos);
					
					// Long
				
						if(this.nbr_camions == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nbr_camions);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume_unitaire);
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume_tot);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_unitaire);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_tot);
					
					// String
				
						writeString(this.paye_comptant,dos);
					
					// String
				
						writeString(this.accuse_commande,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// String
				
						writeString(this.num_commande,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// Long
				
						if(this.id_monnaie1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie1);
		            	}
					
					// Long
				
						if(this.id_monnaie2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
					// Integer
				
						writeInteger(this.num_cmd_jour,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_commande="+String.valueOf(idacl_commande));
		sb.append(",idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",date_commande="+date_commande);
		sb.append(",nbr_camions="+String.valueOf(nbr_camions));
		sb.append(",volume_unitaire="+String.valueOf(volume_unitaire));
		sb.append(",volume_tot="+String.valueOf(volume_tot));
		sb.append(",prix_unitaire="+String.valueOf(prix_unitaire));
		sb.append(",prix_tot="+String.valueOf(prix_tot));
		sb.append(",paye_comptant="+paye_comptant);
		sb.append(",accuse_commande="+accuse_commande);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",num_commande="+num_commande);
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",id_monnaie1="+String.valueOf(id_monnaie1));
		sb.append(",id_monnaie2="+String.valueOf(id_monnaie2));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
		sb.append(",num_cmd_jour="+String.valueOf(num_cmd_jour));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cmdStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_commande, other.idacl_commande);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];

	
			    public long idacl_commande;

				public long getIdacl_commande () {
					return this.idacl_commande;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public String date_commande;

				public String getDate_commande () {
					return this.date_commande;
				}
				
			    public Long nbr_camions;

				public Long getNbr_camions () {
					return this.nbr_camions;
				}
				
			    public BigDecimal volume_unitaire;

				public BigDecimal getVolume_unitaire () {
					return this.volume_unitaire;
				}
				
			    public BigDecimal volume_tot;

				public BigDecimal getVolume_tot () {
					return this.volume_tot;
				}
				
			    public BigDecimal prix_unitaire;

				public BigDecimal getPrix_unitaire () {
					return this.prix_unitaire;
				}
				
			    public BigDecimal prix_tot;

				public BigDecimal getPrix_tot () {
					return this.prix_tot;
				}
				
			    public String paye_comptant;

				public String getPaye_comptant () {
					return this.paye_comptant;
				}
				
			    public String accuse_commande;

				public String getAccuse_commande () {
					return this.accuse_commande;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public String num_commande;

				public String getNum_commande () {
					return this.num_commande;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public Long id_monnaie1;

				public Long getId_monnaie1 () {
					return this.id_monnaie1;
				}
				
			    public Long id_monnaie2;

				public Long getId_monnaie2 () {
					return this.id_monnaie2;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				
			    public Integer idacl_typec;

				public Integer getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public Integer num_cmd_jour;

				public Integer getNum_cmd_jour () {
					return this.num_cmd_jour;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_commande = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
					this.date_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nbr_camions = null;
           				} else {
           			    	this.nbr_camions = dis.readLong();
           				}
					
						this.volume_unitaire = (BigDecimal) dis.readObject();
					
						this.volume_tot = (BigDecimal) dis.readObject();
					
						this.prix_unitaire = (BigDecimal) dis.readObject();
					
						this.prix_tot = (BigDecimal) dis.readObject();
					
					this.paye_comptant = readString(dis);
					
					this.accuse_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
					this.num_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie1 = null;
           				} else {
           			    	this.id_monnaie1 = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie2 = null;
           				} else {
           			    	this.id_monnaie2 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
						this.idacl_typec = readInteger(dis);
					
						this.num_cmd_jour = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_commande);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// String
				
						writeString(this.date_commande,dos);
					
					// Long
				
						if(this.nbr_camions == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nbr_camions);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume_unitaire);
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume_tot);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_unitaire);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_tot);
					
					// String
				
						writeString(this.paye_comptant,dos);
					
					// String
				
						writeString(this.accuse_commande,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// String
				
						writeString(this.num_commande,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// Long
				
						if(this.id_monnaie1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie1);
		            	}
					
					// Long
				
						if(this.id_monnaie2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
					// Integer
				
						writeInteger(this.idacl_typec,dos);
					
					// Integer
				
						writeInteger(this.num_cmd_jour,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_commande="+String.valueOf(idacl_commande));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",date_commande="+date_commande);
		sb.append(",nbr_camions="+String.valueOf(nbr_camions));
		sb.append(",volume_unitaire="+String.valueOf(volume_unitaire));
		sb.append(",volume_tot="+String.valueOf(volume_tot));
		sb.append(",prix_unitaire="+String.valueOf(prix_unitaire));
		sb.append(",prix_tot="+String.valueOf(prix_tot));
		sb.append(",paye_comptant="+paye_comptant);
		sb.append(",accuse_commande="+accuse_commande);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",num_commande="+num_commande);
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",id_monnaie1="+String.valueOf(id_monnaie1));
		sb.append(",id_monnaie2="+String.valueOf(id_monnaie2));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
		sb.append(",idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",num_cmd_jour="+String.valueOf(num_cmd_jour));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
    static byte[] commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long idacl_commande;

				public long getIdacl_commande () {
					return this.idacl_commande;
				}
				
			    public long idacl_client;

				public long getIdacl_client () {
					return this.idacl_client;
				}
				
			    public String date_commande;

				public String getDate_commande () {
					return this.date_commande;
				}
				
			    public Long nbr_camions;

				public Long getNbr_camions () {
					return this.nbr_camions;
				}
				
			    public BigDecimal volume_unitaire;

				public BigDecimal getVolume_unitaire () {
					return this.volume_unitaire;
				}
				
			    public BigDecimal volume_tot;

				public BigDecimal getVolume_tot () {
					return this.volume_tot;
				}
				
			    public BigDecimal prix_unitaire;

				public BigDecimal getPrix_unitaire () {
					return this.prix_unitaire;
				}
				
			    public BigDecimal prix_tot;

				public BigDecimal getPrix_tot () {
					return this.prix_tot;
				}
				
			    public String paye_comptant;

				public String getPaye_comptant () {
					return this.paye_comptant;
				}
				
			    public String accuse_commande;

				public String getAccuse_commande () {
					return this.accuse_commande;
				}
				
			    public Long id_user;

				public Long getId_user () {
					return this.id_user;
				}
				
			    public Long est_supprime;

				public Long getEst_supprime () {
					return this.est_supprime;
				}
				
			    public java.util.Date date_creation;

				public java.util.Date getDate_creation () {
					return this.date_creation;
				}
				
			    public java.util.Date date_last_modif;

				public java.util.Date getDate_last_modif () {
					return this.date_last_modif;
				}
				
			    public String num_commande;

				public String getNum_commande () {
					return this.num_commande;
				}
				
			    public Long id_conversion;

				public Long getId_conversion () {
					return this.id_conversion;
				}
				
			    public Long id_monnaie1;

				public Long getId_monnaie1 () {
					return this.id_monnaie1;
				}
				
			    public Long id_monnaie2;

				public Long getId_monnaie2 () {
					return this.id_monnaie2;
				}
				
			    public BigDecimal taux_1;

				public BigDecimal getTaux_1 () {
					return this.taux_1;
				}
				
			    public BigDecimal taux_2;

				public BigDecimal getTaux_2 () {
					return this.taux_2;
				}
				
			    public Long validation;

				public Long getValidation () {
					return this.validation;
				}
				
			    public Long id_user_validation;

				public Long getId_user_validation () {
					return this.id_user_validation;
				}
				
			    public Integer idacl_typec;

				public Integer getIdacl_typec () {
					return this.idacl_typec;
				}
				
			    public Integer num_cmd_jour;

				public Integer getNum_cmd_jour () {
					return this.num_cmd_jour;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idacl_commande;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.idacl_commande != other.idacl_commande)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.idacl_commande = this.idacl_commande;
	            other.idacl_client = this.idacl_client;
	            other.date_commande = this.date_commande;
	            other.nbr_camions = this.nbr_camions;
	            other.volume_unitaire = this.volume_unitaire;
	            other.volume_tot = this.volume_tot;
	            other.prix_unitaire = this.prix_unitaire;
	            other.prix_tot = this.prix_tot;
	            other.paye_comptant = this.paye_comptant;
	            other.accuse_commande = this.accuse_commande;
	            other.id_user = this.id_user;
	            other.est_supprime = this.est_supprime;
	            other.date_creation = this.date_creation;
	            other.date_last_modif = this.date_last_modif;
	            other.num_commande = this.num_commande;
	            other.id_conversion = this.id_conversion;
	            other.id_monnaie1 = this.id_monnaie1;
	            other.id_monnaie2 = this.id_monnaie2;
	            other.taux_1 = this.taux_1;
	            other.taux_2 = this.taux_2;
	            other.validation = this.validation;
	            other.id_user_validation = this.id_user_validation;
	            other.idacl_typec = this.idacl_typec;
	            other.num_cmd_jour = this.num_cmd_jour;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.idacl_commande = this.idacl_commande;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length) {
				if(length < 1024 && commonByteArray_TPDW_DANISJIOGUE_job_table_dep2.length == 0) {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[1024];
				} else {
   					commonByteArray_TPDW_DANISJIOGUE_job_table_dep2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length);
			strReturn = new String(commonByteArray_TPDW_DANISJIOGUE_job_table_dep2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TPDW_DANISJIOGUE_job_table_dep2) {

        	try {

        		int length = 0;
		
			        this.idacl_commande = dis.readLong();
					
			        this.idacl_client = dis.readLong();
					
					this.date_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nbr_camions = null;
           				} else {
           			    	this.nbr_camions = dis.readLong();
           				}
					
						this.volume_unitaire = (BigDecimal) dis.readObject();
					
						this.volume_tot = (BigDecimal) dis.readObject();
					
						this.prix_unitaire = (BigDecimal) dis.readObject();
					
						this.prix_tot = (BigDecimal) dis.readObject();
					
					this.paye_comptant = readString(dis);
					
					this.accuse_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user = null;
           				} else {
           			    	this.id_user = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.est_supprime = null;
           				} else {
           			    	this.est_supprime = dis.readLong();
           				}
					
					this.date_creation = readDate(dis);
					
					this.date_last_modif = readDate(dis);
					
					this.num_commande = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_conversion = null;
           				} else {
           			    	this.id_conversion = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie1 = null;
           				} else {
           			    	this.id_monnaie1 = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_monnaie2 = null;
           				} else {
           			    	this.id_monnaie2 = dis.readLong();
           				}
					
						this.taux_1 = (BigDecimal) dis.readObject();
					
						this.taux_2 = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.validation = null;
           				} else {
           			    	this.validation = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_user_validation = null;
           				} else {
           			    	this.id_user_validation = dis.readLong();
           				}
					
						this.idacl_typec = readInteger(dis);
					
						this.num_cmd_jour = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idacl_commande);
					
					// long
				
		            	dos.writeLong(this.idacl_client);
					
					// String
				
						writeString(this.date_commande,dos);
					
					// Long
				
						if(this.nbr_camions == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nbr_camions);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume_unitaire);
					
					// BigDecimal
				
       			    	dos.writeObject(this.volume_tot);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_unitaire);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prix_tot);
					
					// String
				
						writeString(this.paye_comptant,dos);
					
					// String
				
						writeString(this.accuse_commande,dos);
					
					// Long
				
						if(this.id_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user);
		            	}
					
					// Long
				
						if(this.est_supprime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.est_supprime);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_creation,dos);
					
					// java.util.Date
				
						writeDate(this.date_last_modif,dos);
					
					// String
				
						writeString(this.num_commande,dos);
					
					// Long
				
						if(this.id_conversion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_conversion);
		            	}
					
					// Long
				
						if(this.id_monnaie1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie1);
		            	}
					
					// Long
				
						if(this.id_monnaie2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_monnaie2);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.taux_2);
					
					// Long
				
						if(this.validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.validation);
		            	}
					
					// Long
				
						if(this.id_user_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_user_validation);
		            	}
					
					// Integer
				
						writeInteger(this.idacl_typec,dos);
					
					// Integer
				
						writeInteger(this.num_cmd_jour,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idacl_commande="+String.valueOf(idacl_commande));
		sb.append(",idacl_client="+String.valueOf(idacl_client));
		sb.append(",date_commande="+date_commande);
		sb.append(",nbr_camions="+String.valueOf(nbr_camions));
		sb.append(",volume_unitaire="+String.valueOf(volume_unitaire));
		sb.append(",volume_tot="+String.valueOf(volume_tot));
		sb.append(",prix_unitaire="+String.valueOf(prix_unitaire));
		sb.append(",prix_tot="+String.valueOf(prix_tot));
		sb.append(",paye_comptant="+paye_comptant);
		sb.append(",accuse_commande="+accuse_commande);
		sb.append(",id_user="+String.valueOf(id_user));
		sb.append(",est_supprime="+String.valueOf(est_supprime));
		sb.append(",date_creation="+String.valueOf(date_creation));
		sb.append(",date_last_modif="+String.valueOf(date_last_modif));
		sb.append(",num_commande="+num_commande);
		sb.append(",id_conversion="+String.valueOf(id_conversion));
		sb.append(",id_monnaie1="+String.valueOf(id_monnaie1));
		sb.append(",id_monnaie2="+String.valueOf(id_monnaie2));
		sb.append(",taux_1="+String.valueOf(taux_1));
		sb.append(",taux_2="+String.valueOf(taux_2));
		sb.append(",validation="+String.valueOf(validation));
		sb.append(",id_user_validation="+String.valueOf(id_user_validation));
		sb.append(",idacl_typec="+String.valueOf(idacl_typec));
		sb.append(",num_cmd_jour="+String.valueOf(num_cmd_jour));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idacl_commande, other.idacl_commande);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
cmdStruct cmd = new cmdStruct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cmd" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
    dbschema_tDBOutput_1 = "";
    String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_1);
    String port_tDBOutput_1 = "1433";
    String dbname_tDBOutput_1 = "GestEntCom" ;
    String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "DanisJIOGUE" ; 
    if (!"".equals(port_tDBOutput_1)) {
    	url_tDBOutput_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_1)) {
				url_tDBOutput_1 += "//" + "GestEntCom"; 
	
    }
    url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_1 = "sa";

 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("84b8a7527403214c");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;	
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
		resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
	
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "acl_commande";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "acl_commande";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([idacl_commande] BIGINT  not null ,[idacl_typec] BIGINT  not null ,[idacl_client] BIGINT  not null ,[date_commande] VARCHAR(12)  ,[nbr_camions] BIGINT ,[volume_unitaire] DECIMAL(10,2)  ,[volume_tot] DECIMAL(10,2)  ,[prix_unitaire] DECIMAL(20,2)  ,[prix_tot] DECIMAL(20,2)  ,[paye_comptant] VARCHAR(3)  ,[accuse_commande] VARCHAR(20)  ,[id_user] BIGINT ,[est_supprime] BIGINT ,[date_creation] DATETIME ,[date_last_modif] DATETIME ,[num_commande] VARCHAR(20)  ,[id_conversion] BIGINT ,[id_monnaie1] BIGINT ,[id_monnaie2] BIGINT ,[taux_1] DECIMAL(10,2)  ,[taux_2] DECIMAL(10,2)  ,[validation] BIGINT ,[id_user_validation] BIGINT ,[num_cmd_jour] BIGINT ,primary key([idacl_commande]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [idacl_commande] = ?");
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([idacl_commande],[idacl_typec],[idacl_client],[date_commande],[nbr_camions],[volume_unitaire],[volume_tot],[prix_unitaire],[prix_tot],[paye_comptant],[accuse_commande],[id_user],[est_supprime],[date_creation],[date_last_modif],[num_commande],[id_conversion],[id_monnaie1],[id_monnaie2],[taux_1],[taux_2],[validation],[id_user_validation],[num_cmd_jour]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
        String update_tDBOutput_1 = "UPDATE [" + tableName_tDBOutput_1 + "] SET [idacl_typec] = ?,[idacl_client] = ?,[date_commande] = ?,[nbr_camions] = ?,[volume_unitaire] = ?,[volume_tot] = ?,[prix_unitaire] = ?,[prix_tot] = ?,[paye_comptant] = ?,[accuse_commande] = ?,[id_user] = ?,[est_supprime] = ?,[date_creation] = ?,[date_last_modif] = ?,[num_commande] = ?,[id_conversion] = ?,[id_monnaie1] = ?,[id_monnaie2] = ?,[taux_1] = ?,[taux_2] = ?,[validation] = ?,[id_user_validation] = ?,[num_cmd_jour] = ? WHERE [idacl_commande] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
        resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
cmdStruct cmd_tmp = new cmdStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = "root";
					
					
					 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "its4prod2020" + "?" + "noDatetimeStringSync=true&useSSL=false";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `acl_commande`.`idacl_commande`, \n  `acl_commande`.`idacl_client`, \n  `acl_commande`.`date_commande`, \n  `acl"
+"_commande`.`nbr_camions`, \n  `acl_commande`.`volume_unitaire`, \n  `acl_commande`.`volume_tot`, \n  `acl_commande`.`prix_u"
+"nitaire`, \n  `acl_commande`.`prix_tot`, \n  `acl_commande`.`paye_comptant`, \n  `acl_commande`.`accuse_commande`, \n  `acl_"
+"commande`.`id_user`, \n  `acl_commande`.`est_supprime`, \n  `acl_commande`.`date_creation`, \n  `acl_commande`.`date_last_m"
+"odif`, \n  `acl_commande`.`num_commande`, \n  `acl_commande`.`id_conversion`, \n  `acl_commande`.`id_monnaie1`, \n  `acl_com"
+"mande`.`id_monnaie2`, \n  `acl_commande`.`taux_1`, \n  `acl_commande`.`taux_2`, \n  `acl_commande`.`validation`, \n  `acl_co"
+"mmande`.`id_user_validation`, \n  `acl_commande`.`idacl_typec`, \n  `acl_commande`.`num_cmd_jour`\nFROM `acl_commande`";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.idacl_commande = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                row1.idacl_commande = rs_tDBInput_1.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.idacl_client = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(2) != null) {
                row1.idacl_client = rs_tDBInput_1.getLong(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.date_commande = null;
							} else {
	                         		
        	row1.date_commande = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.nbr_camions = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(4) != null) {
                row1.nbr_camions = rs_tDBInput_1.getLong(4);
            } else {
                    row1.nbr_camions = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.volume_unitaire = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(5) != null) {
                row1.volume_unitaire = rs_tDBInput_1.getBigDecimal(5);
            } else {
                    row1.volume_unitaire = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.volume_tot = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(6) != null) {
                row1.volume_tot = rs_tDBInput_1.getBigDecimal(6);
            } else {
                    row1.volume_tot = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.prix_unitaire = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(7) != null) {
                row1.prix_unitaire = rs_tDBInput_1.getBigDecimal(7);
            } else {
                    row1.prix_unitaire = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.prix_tot = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(8) != null) {
                row1.prix_tot = rs_tDBInput_1.getBigDecimal(8);
            } else {
                    row1.prix_tot = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.paye_comptant = null;
							} else {
	                         		
        	row1.paye_comptant = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.accuse_commande = null;
							} else {
	                         		
        	row1.accuse_commande = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.id_user = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(11) != null) {
                row1.id_user = rs_tDBInput_1.getLong(11);
            } else {
                    row1.id_user = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.est_supprime = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(12) != null) {
                row1.est_supprime = rs_tDBInput_1.getLong(12);
            } else {
                    row1.est_supprime = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.date_creation = null;
							} else {
										
				if(rs_tDBInput_1.getString(13) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(13);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.date_creation = rs_tDBInput_1.getTimestamp(13);
					} else {
						row1.date_creation = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.date_creation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.date_last_modif = null;
							} else {
										
				if(rs_tDBInput_1.getString(14) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.date_last_modif = rs_tDBInput_1.getTimestamp(14);
					} else {
						row1.date_last_modif = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.date_last_modif =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.num_commande = null;
							} else {
	                         		
        	row1.num_commande = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.id_conversion = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(16) != null) {
                row1.id_conversion = rs_tDBInput_1.getLong(16);
            } else {
                    row1.id_conversion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.id_monnaie1 = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(17) != null) {
                row1.id_monnaie1 = rs_tDBInput_1.getLong(17);
            } else {
                    row1.id_monnaie1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.id_monnaie2 = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(18) != null) {
                row1.id_monnaie2 = rs_tDBInput_1.getLong(18);
            } else {
                    row1.id_monnaie2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.taux_1 = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(19) != null) {
                row1.taux_1 = rs_tDBInput_1.getBigDecimal(19);
            } else {
                    row1.taux_1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.taux_2 = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(20) != null) {
                row1.taux_2 = rs_tDBInput_1.getBigDecimal(20);
            } else {
                    row1.taux_2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.validation = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(21) != null) {
                row1.validation = rs_tDBInput_1.getLong(21);
            } else {
                    row1.validation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.id_user_validation = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(22) != null) {
                row1.id_user_validation = rs_tDBInput_1.getLong(22);
            } else {
                    row1.id_user_validation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.idacl_typec = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(23) != null) {
                row1.idacl_typec = rs_tDBInput_1.getInt(23);
            } else {
                    row1.idacl_typec = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.num_cmd_jour = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(24) != null) {
                row1.num_cmd_jour = rs_tDBInput_1.getInt(24);
            } else {
                    row1.num_cmd_jour = null;
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

          row2 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");
            ope_tFilterRow_1.matches((row1.est_supprime == null? false : row1.est_supprime.compareTo(ParserUtils.parseTo_Long(String.valueOf('0'))) == 0)
                           , "est_supprime.compareTo('0') == 0 failed");
		 	
	        ope_tFilterRow_1.matches((row1.est_supprime == null)
	                       , "est_supprime==null failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row2 == null){ 
                row2 = new row2Struct();
              }
               row2.idacl_commande = row1.idacl_commande;
               row2.idacl_client = row1.idacl_client;
               row2.date_commande = row1.date_commande;
               row2.nbr_camions = row1.nbr_camions;
               row2.volume_unitaire = row1.volume_unitaire;
               row2.volume_tot = row1.volume_tot;
               row2.prix_unitaire = row1.prix_unitaire;
               row2.prix_tot = row1.prix_tot;
               row2.paye_comptant = row1.paye_comptant;
               row2.accuse_commande = row1.accuse_commande;
               row2.id_user = row1.id_user;
               row2.est_supprime = row1.est_supprime;
               row2.date_creation = row1.date_creation;
               row2.date_last_modif = row1.date_last_modif;
               row2.num_commande = row1.num_commande;
               row2.id_conversion = row1.id_conversion;
               row2.id_monnaie1 = row1.id_monnaie1;
               row2.id_monnaie2 = row1.id_monnaie2;
               row2.taux_1 = row1.taux_1;
               row2.taux_2 = row1.taux_2;
               row2.validation = row1.validation;
               row2.id_user_validation = row1.id_user_validation;
               row2.idacl_typec = row1.idacl_typec;
               row2.num_cmd_jour = row1.num_cmd_jour;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

cmd = null;


// # Output table : 'cmd'
cmd_tmp.idacl_commande = row2.idacl_commande ;
cmd_tmp.idacl_typec = row2.idacl_typec ;
cmd_tmp.idacl_client = row2.idacl_client ;
cmd_tmp.date_commande = row2.date_commande ;
cmd_tmp.nbr_camions = row2.nbr_camions ;
cmd_tmp.volume_unitaire = row2.volume_unitaire ;
cmd_tmp.volume_tot = row2.volume_tot ;
cmd_tmp.prix_unitaire = row2.prix_unitaire ;
cmd_tmp.prix_tot = row2.prix_tot ;
cmd_tmp.paye_comptant = row2.paye_comptant ;
cmd_tmp.accuse_commande = row2.accuse_commande ;
cmd_tmp.id_user = row2.id_user ;
cmd_tmp.est_supprime = row2.est_supprime ;
cmd_tmp.date_creation = row2.date_creation ;
cmd_tmp.date_last_modif = row2.date_last_modif ;
cmd_tmp.num_commande = row2.num_commande ;
cmd_tmp.id_conversion = row2.id_conversion ;
cmd_tmp.id_monnaie1 = row2.id_monnaie1 ;
cmd_tmp.id_monnaie2 = row2.id_monnaie2 ;
cmd_tmp.taux_1 = row2.taux_1 ;
cmd_tmp.taux_2 = row2.taux_2 ;
cmd_tmp.validation = row2.validation ;
cmd_tmp.id_user_validation = row2.id_user_validation ;
cmd_tmp.num_cmd_jour = row2.num_cmd_jour ;
cmd = cmd_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "cmd"
if(cmd != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//cmd
			//cmd


			
				if(execStat){
					runStat.updateStatOnConnection("cmd"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;


                    pstmt_tDBOutput_1.setLong(1, cmd.idacl_commande);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        pstmtUpdate_tDBOutput_1.setInt(1, cmd.idacl_typec);

                        pstmtUpdate_tDBOutput_1.setLong(2, cmd.idacl_client);

                        if(cmd.date_commande == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, cmd.date_commande);
}

                        if(cmd.nbr_camions == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(4, cmd.nbr_camions);
}

                        pstmtUpdate_tDBOutput_1.setBigDecimal(5, cmd.volume_unitaire);

                        pstmtUpdate_tDBOutput_1.setBigDecimal(6, cmd.volume_tot);

                        pstmtUpdate_tDBOutput_1.setBigDecimal(7, cmd.prix_unitaire);

                        pstmtUpdate_tDBOutput_1.setBigDecimal(8, cmd.prix_tot);

                        if(cmd.paye_comptant == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(9, cmd.paye_comptant);
}

                        if(cmd.accuse_commande == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(10, cmd.accuse_commande);
}

                        if(cmd.id_user == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(11, cmd.id_user);
}

                        if(cmd.est_supprime == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(12, cmd.est_supprime);
}

                        if(cmd.date_creation != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(13, new java.sql.Timestamp(cmd.date_creation.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.DATE);
}

                        if(cmd.date_last_modif != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(14, new java.sql.Timestamp(cmd.date_last_modif.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.DATE);
}

                        if(cmd.num_commande == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(15, cmd.num_commande);
}

                        if(cmd.id_conversion == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(16, cmd.id_conversion);
}

                        if(cmd.id_monnaie1 == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(17, cmd.id_monnaie1);
}

                        if(cmd.id_monnaie2 == null) {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(18, cmd.id_monnaie2);
}

                        pstmtUpdate_tDBOutput_1.setBigDecimal(19, cmd.taux_1);

                        pstmtUpdate_tDBOutput_1.setBigDecimal(20, cmd.taux_2);

                        if(cmd.validation == null) {
pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(21, cmd.validation);
}

                        if(cmd.id_user_validation == null) {
pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(22, cmd.id_user_validation);
}

                        if(cmd.num_cmd_jour == null) {
pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(23, cmd.num_cmd_jour);
}


	                    

                        pstmtUpdate_tDBOutput_1.setLong(24 + count_tDBOutput_1, cmd.idacl_commande);

            try {
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
        			
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setLong(1, cmd.idacl_commande);

                        pstmtInsert_tDBOutput_1.setInt(2, cmd.idacl_typec);

                        pstmtInsert_tDBOutput_1.setLong(3, cmd.idacl_client);

                        if(cmd.date_commande == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, cmd.date_commande);
}

                        if(cmd.nbr_camions == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(5, cmd.nbr_camions);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(6, cmd.volume_unitaire);

                        pstmtInsert_tDBOutput_1.setBigDecimal(7, cmd.volume_tot);

                        pstmtInsert_tDBOutput_1.setBigDecimal(8, cmd.prix_unitaire);

                        pstmtInsert_tDBOutput_1.setBigDecimal(9, cmd.prix_tot);

                        if(cmd.paye_comptant == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(10, cmd.paye_comptant);
}

                        if(cmd.accuse_commande == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, cmd.accuse_commande);
}

                        if(cmd.id_user == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(12, cmd.id_user);
}

                        if(cmd.est_supprime == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(13, cmd.est_supprime);
}

                        if(cmd.date_creation != null) {
pstmtInsert_tDBOutput_1.setTimestamp(14, new java.sql.Timestamp(cmd.date_creation.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.DATE);
}

                        if(cmd.date_last_modif != null) {
pstmtInsert_tDBOutput_1.setTimestamp(15, new java.sql.Timestamp(cmd.date_last_modif.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.DATE);
}

                        if(cmd.num_commande == null) {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(16, cmd.num_commande);
}

                        if(cmd.id_conversion == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(17, cmd.id_conversion);
}

                        if(cmd.id_monnaie1 == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(18, cmd.id_monnaie1);
}

                        if(cmd.id_monnaie2 == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(19, cmd.id_monnaie2);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(20, cmd.taux_1);

                        pstmtInsert_tDBOutput_1.setBigDecimal(21, cmd.taux_2);

                        if(cmd.validation == null) {
pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(22, cmd.validation);
}

                        if(cmd.id_user_validation == null) {
pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(23, cmd.id_user_validation);
}

                        if(cmd.num_cmd_jour == null) {
pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(24, cmd.num_cmd_jour);
}

            try {
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	
                	conn_tDBOutput_1.commit();
            		
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "cmd"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
            conn_tDBOutput_1.commit();
			
        conn_tDBOutput_1 .close();
        resourceMap.put("finish_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cmd"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final job_table_dep2 job_table_dep2Class = new job_table_dep2();

        int exitCode = job_table_dep2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = job_table_dep2.class.getClassLoader().getResourceAsStream("tpdw_danisjiogue/job_table_dep2_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = job_table_dep2.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}
try {
errorCode = null;tDBInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}
try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : job_table_dep2");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     379214 characters generated by Talend Open Studio for Data Integration 
 *     on the 23 mars 2020 10:01:14 GMT
 ************************************************************************************************/